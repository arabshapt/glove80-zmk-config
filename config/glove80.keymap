
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Dvorak 0
#define LAYER_Engrammer 1
#define LAYER_Engram 2
#define LAYER_ColemakDH 3
#define LAYER_Colemak 4
#define LAYER_QWERTY 5
#define LAYER_Lower 6
#define LAYER_Magic 7
#define LAYER_Cursor 8
#define LAYER_Number 9
#define LAYER_Function 10
#define LAYER_Symbol 11
#define LAYER_Mouse 12
#define LAYER_System 13
#define LAYER_Gaming 14
#define LAYER_Typing 15
#define LAYER_Emoji 16
#define LAYER_World 17

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

    /* Custom Defined Behaviors */
/ {
    //#define ENABLE_MOUSE_KEYS // requires PR23 beta firmware (see below)
//////////////////////////////////////////////////////////////////////
// NOTE: Use the `#define` settings below to customize this keymap! //
// You can override them here instead of modifying them down there. //
// /* EXAMPLE: */  #define EMOJI_HAIR_STYLE_PRESET 3 // curly_hair  //
//////////////////////////////////////////////////////////////////////
//
// Sunaku's Keymap v31 -- "Glorious Engrammer"
// - https://github.com/sunaku/glove80-keymaps
//
//////////////////////////////////////////////////////////////////////
#define QUICK_TAP_MS 175 
#define QUICK_TAP_MS_PRIMAL 140 //140  ONLY FOR WARM TIMES
#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30
#define COMBO_TERM_SLOWER 42
#define COMBO_TERM_SLUGGISH 54
#define COMBO_TERM_SLOWEST 70
#define COMBO_TERM_TOOSLOW 100
#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro
#define AHL(keycode, hyper) &ahl hyper RC(RA(RS(LS(LC(keycode)))))      // AutoHyper Macro HYPER_85_KEY
#define AHR(keycode, hyper) &ahr hyper RC(RA(RS(LG(LC(keycode)))))      // AutoHyper Macro HYPER_86_KEY
#define AH(keycode) &as RS(RC(RA(RG(keycode)))) keycode      // AutoHyper Macro HYPER_85_KEY



#define HYPER_01_KEY(key) LS(LC(LA(LG(key))))   // hyper  LS,LC,LA,LG
#define HYPER_02_KEY(key) RS(RC(RA(RG(key))))   // hyper  RS,RC,RA,RG
#define HYPER_03_KEY(key) RS(RC(RA(LS(key))))  // hyper  RS,RC,RA,LS
#define HYPER_04_KEY(key) RS(RC(RA(LC(key))))  // hyper  RS,RC,RA,LC
#define HYPER_05_KEY(key) RS(RC(RA(LA(key))))   // hyper  RS,RC,RA,LA
#define HYPER_06_KEY(key) RS(RC(RA(LG(key))))   // hyper  RS,RC,RA,LG
#define HYPER_07_KEY(key) RS(RC(RG(LS(key))))  // hyper  RS,RC,RG,LS
#define HYPER_08_KEY(key) RS(RC(RG(LC(key))))  // hyper  RS,RC,RG,LC
#define HYPER_09_KEY(key) RS(RC(RG(LA(key))))   // hyper  RS,RC,RG,LA
#define HYPER_10_KEY(key) RS(RC(RG(LG(key))))   // hyper  RS,RC,RG,LG
#define HYPER_11_KEY(key) RS(RC(LS(LC(key))))  // hyper  RS,RC,LS,LC
#define HYPER_12_KEY(key) RS(RC(LS(LA(key))))   // hyper  RS,RC,LS,LA
#define HYPER_13_KEY(key) RS(RC(LS(LG(key))))   // hyper  RS,RC,LS,LG
#define HYPER_14_KEY(key) RS(RC(LC(LA(key))))   // hyper  RS,RC,LC,LA
#define HYPER_15_KEY(key) RS(RC(LC(LG(key))))   // hyper  RS,RC,LC,LG
#define HYPER_16_KEY(key) RS(RC(LA(LG(key))))   // hyper  RS,RC,LA,LG
#define HYPER_17_KEY(key) RS(RA(RG(LS(key))))  // hyper  RS,RA,RG,LS
#define HYPER_18_KEY(key) RS(RA(RG(LC(key))))  // hyper  RS,RA,RG,LC
#define HYPER_19_KEY(key) RS(RA(RG(LA(key))))   // hyper  RS,RA,RG,LA
#define HYPER_20_KEY(key) RS(RA(RG(LG(key))))   // hyper  RS,RA,RG,LG
#define HYPER_21_KEY(key) RS(RA(LS(LC(key))))  // hyper  RS,RA,LS,LC
#define HYPER_22_KEY(key) RS(RA(LS(LA(key))))   // hyper  RS,RA,LS,LA
#define HYPER_23_KEY(key) RS(RA(LS(LG(key))))   // hyper  RS,RA,LS,LG
#define HYPER_24_KEY(key) RS(RA(LC(LA(key))))   // hyper  RS,RA,LC,LA
#define HYPER_25_KEY(key) RS(RA(LC(LG(key))))   // hyper  RS,RA,LC,LG
#define HYPER_26_KEY(key) RS(RA(LA(LG(key))))   // hyper  RS,RA,LA,LG
#define HYPER_27_KEY(key) RS(RG(LS(LC(key))))  // hyper  RS,RG,LS,LC
#define HYPER_28_KEY(key) RS(RG(LS(LA(key))))   // hyper  RS,RG,LS,LA
#define HYPER_29_KEY(key) RS(RG(LS(LG(key))))   // hyper  RS,RG,LS,LG
#define HYPER_30_KEY(key) RS(RG(LC(LA(key))))   // hyper  RS,RG,LC,LA
#define HYPER_31_KEY(key) RS(RG(LC(LG(key))))   // hyper  RS,RG,LC,LG
#define HYPER_32_KEY(key) RS(RG(LA(LG(key))))   // hyper  RS,RG,LA,LG
#define HYPER_33_KEY(key) RS(LS(LC(LA(key))))   // hyper  RS,LS,LC,LA
#define HYPER_34_KEY(key) RS(LS(LC(LG(key))))   // hyper  RS,LS,LC,LG
#define HYPER_35_KEY(key) RS(LS(LA(LG(key))))   // hyper  RS,LS,LA,LG
#define HYPER_36_KEY(key) RS(LC(LA(LG(key))))   // hyper  RS,LC,LA,LG
#define HYPER_37_KEY(key) RC(RA(RG(LS(key))))  // hyper  RC,RA,RG,LS
#define HYPER_38_KEY(key) RC(RA(RG(LC(key))))  // hyper  RC,RA,RG,LC
#define HYPER_39_KEY(key) RC(RA(RG(LA(key))))   // hyper  RC,RA,RG,LA
#define HYPER_40_KEY(key) RC(RA(RG(LG(key))))   // hyper  RC,RA,RG,LG
#define HYPER_41_KEY(key) RC(RA(LS(LC(key))))  // hyper  RC,RA,LS,LC
#define HYPER_42_KEY(key) RC(RA(LS(LA(key))))   // hyper  RC,RA,LS,LA
#define HYPER_43_KEY(key) RC(RA(LS(LG(key))))   // hyper  RC,RA,LS,LG
#define HYPER_44_KEY(key) RC(RA(LC(LA(key))))   // hyper  RC,RA,LC,LA
#define HYPER_45_KEY(key) RC(RA(LC(LG(key))))   // hyper  RC,RA,LC,LG
#define HYPER_46_KEY(key) RC(RA(LA(LG(key))))   // hyper  RC,RA,LA,LG
#define HYPER_47_KEY(key) RC(RG(LS(LC(key))))  // hyper  RC,RG,LS,LC
#define HYPER_48_KEY(key) RC(RG(LS(LA(key))))   // hyper  RC,RG,LS,LA
#define HYPER_49_KEY(key) RC(RG(LS(LG(key))))   // hyper  RC,RG,LS,LG
#define HYPER_50_KEY(key) RC(RG(LC(LA(key))))   // hyper  RC,RG,LC,LA
#define HYPER_51_KEY(key) RC(RG(LC(LG(key))))   // hyper  RC,RG,LC,LG
#define HYPER_52_KEY(key) RC(RG(LA(LG(key))))   // hyper  RC,RG,LA,LG
#define HYPER_53_KEY(key) RC(LS(LC(LA(key))))   // hyper  RC,LS,LC,LA
#define HYPER_54_KEY(key) RC(LS(LC(LG(key))))   // hyper  RC,LS,LC,LG
#define HYPER_55_KEY(key) RC(LS(LA(LG(key))))   // hyper  RC,LS,LA,LG
#define HYPER_56_KEY(key) RC(LC(LA(LG(key))))   // hyper  RC,LC,LA,LG
#define HYPER_57_KEY(key) RA(RG(LS(LC(key))))  // hyper  RA,RG,LS,LC
#define HYPER_58_KEY(key) RA(RG(LS(LA(key))))   // hyper  RA,RG,LS,LA
#define HYPER_59_KEY(key) RA(RG(LS(LG(key))))   // hyper  RA,RG,LS,LG
#define HYPER_60_KEY(key) RA(RG(LC(LA(key))))   // hyper  RA,RG,LC,LA
#define HYPER_61_KEY(key) RA(RG(LC(LG(key))))   // hyper  RA,RG,LC,LG
#define HYPER_62_KEY(key) RA(RG(LA(LG(key))))   // hyper  RA,RG,LA,LG
#define HYPER_63_KEY(key) RA(LS(LC(LA(key))))   // hyper  RA,LS,LC,LA
#define HYPER_64_KEY(key) RA(LS(LC(LG(key))))   // hyper  RA,LS,LC,LG
#define HYPER_65_KEY(key) RA(LS(LA(LG(key))))   // hyper  RA,LS,LA,LG
#define HYPER_66_KEY(key) RA(LC(LA(LG(key))))   // hyper  RA,LC,LA,LG
#define HYPER_67_KEY(key) RG(LS(LC(LA(key))))   // hyper  RG,LS,LC,LA
#define HYPER_68_KEY(key) RG(LS(LC(LG(key))))   // hyper  RG,LS,LC,LG
#define HYPER_69_KEY(key) RG(LS(LA(LG(key))))   // hyper  RG,LS,LA,LG
#define HYPER_70_KEY(key) RG(LC(LA(LG(key))))   // hyper  RG,LC,LA,LG

#define HYPER_71_KEY(key)  RC(RA(RG(RS(LA(key)))))   // hyper  // RC RA RG RS LA
#define HYPER_72_KEY(key)  RC(RA(RG(RS(LS(key)))))   // hyper  // RC RA RG RS LS
#define HYPER_73_KEY(key)  RC(RA(RG(RS(LG(key)))))   // hyper  // RC RA RG RS LG
#define HYPER_74_KEY(key)  RC(RA(RG(RS(LC(key)))))   // hyper  // RC RA RG RS LC
#define HYPER_75_KEY(key)  RC(RA(RG(LA(LS(key)))))   // hyper  // RC RA RG LA LS
#define HYPER_76_KEY(key)  RC(RA(RG(LA(LG(key)))))   // hyper  // RC RA RG LA LG
#define HYPER_77_KEY(key)  RC(RA(RG(LA(LC(key)))))   // hyper  // RC RA RG LA LC
#define HYPER_78_KEY(key)  RC(RA(RG(LS(LG(key)))))   // hyper  // RC RA RG LS LG
#define HYPER_79_KEY(key)  RC(RA(RG(LS(LC(key)))))   // hyper  // RC RA RG LS LC
#define HYPER_80_KEY(key)  RC(RA(RG(LG(LC(key)))))   // hyper  // RC RA RG LG LC
#define HYPER_81_KEY(key)  RC(RA(RS(LA(LS(key)))))   // hyper  // RC RA RS LA LS
#define HYPER_82_KEY(key)  RC(RA(RS(LA(LG(key)))))   // hyper  // RC RA RS LA LG
#define HYPER_83_KEY(key)  RC(RA(RS(LA(LC(key)))))   // hyper  // RC RA RS LA LC
#define HYPER_84_KEY(key)  RC(RA(RS(LS(LG(key)))))   // hyper  // RC RA RS LS LG
#define HYPER_85_KEY(key)  RC(RA(RS(LS(LC(key)))))   // hyper  // RC RA RS LS LC
#define HYPER_86_KEY(key)  RC(RA(RS(LG(LC(key)))))   // hyper  // RC RA RS LG LC
#define HYPER_87_KEY(key)  RC(RA(LA(LS(LG(key)))))   // hyper  // RC RA LA LS LG
#define HYPER_88_KEY(key)  RC(RA(LA(LS(LC(key)))))   // hyper  // RC RA LA LS LC
#define HYPER_89_KEY(key)  RC(RA(LA(LG(LC(key)))))   // hyper  // RC RA LA LG LC
#define HYPER_90_KEY(key)  RC(RA(LS(LG(LC(key)))))   // hyper  // RC RA LS LG LC
// unused hyper keys
#define HYPER_91_KEY(key)  RC(RG(RS(LA(LS(key)))))   // hyper  // RC RG RS LA LS
#define HYPER_92_KEY(key)  RC(RG(RS(LA(LG(key)))))   // hyper  // RC RG RS LA LG
#define HYPER_93_KEY(key)  RC(RG(RS(LA(LC(key)))))   // hyper  // RC RG RS LA LC
#define HYPER_94_KEY(key)  RC(RG(RS(LS(LG(key)))))   // hyper  // RC RG RS LS LG

// used for right red leader
#define HYPER_95_KEY(key)  RC(RG(RS(LS(LC(key)))))   // hyper  // RC RG RS LS LC
#define HYPER_96_KEY(key)  RC(RG(RS(LG(LC(key)))))   // hyper  // RC RG RS LG LC
#define HYPER_97_KEY(key)  RC(RG(LA(LS(LG(key)))))   // hyper  // RC RG LA LS LG
#define HYPER_98_KEY(key)  RC(RG(LA(LS(LC(key)))))   // hyper  // RC RG LA LS LC
#define HYPER_99_KEY(key)  RC(RG(LA(LG(LC(key)))))   // hyper  // RC RG LA LG LC
#define HYPER_100_KEY(key)  RC(RG(LS(LG(LC(key)))))   // hyper  // RC RG LS LG LC
#define HYPER_101_KEY(key)  RC(RS(LA(LS(LG(key)))))   // hyper  // RC RS LA LS LG
#define HYPER_102_KEY(key)  RC(RS(LA(LS(LC(key)))))   // hyper  // RC RS LA LS LC
#define HYPER_103_KEY(key)  RC(RS(LA(LG(LC(key)))))   // hyper  // RC RS LA LG LC
#define HYPER_104_KEY(key)  RC(RS(LS(LG(LC(key)))))   // hyper  // RC RS LS LG LC
#define HYPER_105_KEY(key)  RC(LA(LS(LG(LC(key)))))   // hyper  // RC LA LS LG LC
#define HYPER_106_KEY(key)  RA(RG(RS(LA(LS(key)))))   // hyper  // RA RG RS LA LS
#define HYPER_107_KEY(key)  RA(RG(RS(LA(LG(key)))))   // hyper  // RA RG RS LA LG
#define HYPER_108_KEY(key)  RA(RG(RS(LA(LC(key)))))   // hyper  // RA RG RS LA LC
#define HYPER_109_KEY(key)  RA(RG(RS(LS(LG(key)))))   // hyper  // RA RG RS LS LG
#define HYPER_110_KEY(key)  RA(RG(RS(LS(LC(key)))))   // hyper  // RA RG RS LS LC
#define HYPER_111_KEY(key)  RA(RG(RS(LG(LC(key)))))   // hyper  // RA RG RS LG LC
#define HYPER_112_KEY(key)  RA(RG(LA(LS(LG(key)))))   // hyper  // RA RG LA LS LG
#define HYPER_113_KEY(key)  RA(RG(LA(LS(LC(key)))))   // hyper  // RA RG LA LS LC
#define HYPER_114_KEY(key)  RA(RG(LA(LG(LC(key)))))   // hyper  // RA RG LA LG LC
#define HYPER_115_KEY(key)  RA(RG(LS(LG(LC(key)))))   // hyper  // RA RG LS LG LC
#define HYPER_116_KEY(key)  RA(RS(LA(LS(LG(key)))))   // hyper  // RA RS LA LS LG
#define HYPER_117_KEY(key)  RA(RS(LA(LS(LC(key)))))   // hyper  // RA RS LA LS LC
#define HYPER_118_KEY(key)  RA(RS(LA(LG(LC(key)))))   // hyper  // RA RS LA LG LC
#define HYPER_119_KEY(key)  RA(RS(LS(LG(LC(key)))))   // hyper  // RA RS LS LG LC
#define HYPER_120_KEY(key)  RA(LA(LS(LG(LC(key)))))   // hyper  // RA LA LS LG LC
#define HYPER_121_KEY(key)  RG(RS(LA(LS(LG(key)))))   // hyper  // RG RS LA LS LG
#define HYPER_122_KEY(key)  RG(RS(LA(LS(LC(key)))))   // hyper  // RG RS LA LS LC
#define HYPER_123_KEY(key)  RG(RS(LA(LG(LC(key)))))   // hyper  // RG RS LA LG LC
#define HYPER_124_KEY(key)  RG(RS(LS(LG(LC(key)))))   // hyper  // RG RS LS LG LC

// keys for one time activation(not holding)
#define HYPER_125_KEY(key)  RG(LA(LS(LG(LC(key)))))   // hyper  // RG LA LS LG LC
#define HYPER_126_KEY(key)  RS(LA(LS(LG(LC(key)))))   // hyper  // RS LA LS LG LC
#define HYPER_127_KEY(key)  RC(RA(RG(RS(LA(LS(key))))))   // hyper  // RC RA RG RS LA LS
#define HYPER_128_KEY(key)  RC(RA(RG(RS(LA(LG(key))))))   // hyper  // RC RA RG RS LA LG
#define HYPER_129_KEY(key)  RC(RA(RG(RS(LA(LC(key))))))   // hyper  // RC RA RG RS LA LC
#define HYPER_130_KEY(key)  RC(RA(RG(RS(LS(LG(key))))))   // hyper  // RC RA RG RS LS LG
#define HYPER_131_KEY(key)  RC(RA(RG(RS(LS(LC(key))))))   // hyper  // RC RA RG RS LS LC
#define HYPER_132_KEY(key)  RC(RA(RG(RS(LG(LC(key))))))   // hyper  // RC RA RG RS LG LC
#define HYPER_133_KEY(key)  RC(RA(RG(LA(LS(LG(key))))))   // hyper  // RC RA RG LA LS LG
#define HYPER_134_KEY(key)  RC(RA(RG(LA(LS(LC(key))))))   // hyper  // RC RA RG LA LS LC
#define HYPER_135_KEY(key)  RC(RA(RG(LA(LG(LC(key))))))   // hyper  // RC RA RG LA LG LC
#define HYPER_136_KEY(key)  RC(RA(RG(LS(LG(LC(key))))))   // hyper  // RC RA RG LS LG LC
#define HYPER_137_KEY(key)  RC(RA(RS(LA(LS(LG(key))))))   // hyper  // RC RA RS LA LS LG
#define HYPER_138_KEY(key)  RC(RA(RS(LA(LS(LC(key))))))   // hyper  // RC RA RS LA LS LC
#define HYPER_139_KEY(key)  RC(RA(RS(LA(LG(LC(key))))))   // hyper  // RC RA RS LA LG LC
#define HYPER_140_KEY(key)  RC(RA(RS(LS(LG(LC(key))))))   // hyper  // RC RA RS LS LG LC
#define HYPER_141_KEY(key)  RC(RA(LA(LS(LG(LC(key))))))   // hyper  // RC RA LA LS LG LC
#define HYPER_142_KEY(key)  RC(RG(RS(LA(LS(LG(key))))))   // hyper  // RC RG RS LA LS LG
#define HYPER_143_KEY(key)  RC(RG(RS(LA(LS(LC(key))))))   // hyper  // RC RG RS LA LS LC
#define HYPER_144_KEY(key)  RC(RG(RS(LA(LG(LC(key))))))   // hyper  // RC RG RS LA LG LC
#define HYPER_145_KEY(key)  RC(RG(RS(LS(LG(LC(key))))))   // hyper  // RC RG RS LS LG LC
#define HYPER_146_KEY(key)  RC(RG(LA(LS(LG(LC(key))))))   // hyper  // RC RG LA LS LG LC
#define HYPER_147_KEY(key)  RC(RS(LA(LS(LG(LC(key))))))   // hyper  // RC RS LA LS LG LC
#define HYPER_148_KEY(key)  RA(RG(RS(LA(LS(LG(key))))))   // hyper  // RA RG RS LA LS LG
#define HYPER_149_KEY(key)  RA(RG(RS(LA(LS(LC(key))))))   // hyper  // RA RG RS LA LS LC
#define HYPER_150_KEY(key)  RA(RG(RS(LA(LG(LC(key))))))   // hyper  // RA RG RS LA LG LC
#define HYPER_151_KEY(key)  RA(RG(RS(LS(LG(LC(key))))))   // hyper  // RA RG RS LS LG LC
#define HYPER_152_KEY(key)  RA(RG(LA(LS(LG(LC(key))))))   // hyper  // RA RG LA LS LG LC
#define HYPER_153_KEY(key)  RA(RS(LA(LS(LG(LC(key))))))   // hyper  // RA RS LA LS LG LC
#define HYPER_154_KEY(key)  RG(RS(LA(LS(LG(LC(key))))))   // hyper  // RG RS LA LS LG LC

#define SUPER_HYPER_01 LS(LC(LA(LG(CAPS))))   // hyper  LS,LC,LA,LG
#define HYPER_01 LS(LC(LA(LGUI)))   // hyper  LS,LC,LA,LG
#define HYPER_02 RS(RC(RA(RGUI)))   // hyper  RS,RC,RA,RG
#define HYPER_03 RS(RC(RA(LSHFT)))  // hyper  RS,RC,RA,LS
#define HYPER_04 RS(RC(RA(LCTRL)))  // hyper  RS,RC,RA,LC
#define HYPER_05 RS(RC(RA(LALT)))   // hyper  RS,RC,RA,LA
#define HYPER_06 RS(RC(RA(LGUI)))   // hyper  RS,RC,RA,LG
#define HYPER_07 RS(RC(RG(LSHFT)))  // hyper  RS,RC,RG,LS
#define HYPER_08 RS(RC(RG(LCTRL)))  // hyper  RS,RC,RG,LC
#define HYPER_09 RS(RC(RG(LALT)))   // hyper  RS,RC,RG,LA
#define HYPER_10 RS(RC(RG(LGUI)))   // hyper  RS,RC,RG,LG
#define HYPER_11 RS(RC(LS(LCTRL)))  // hyper  RS,RC,LS,LC
#define HYPER_12 RS(RC(LS(LALT)))   // hyper  RS,RC,LS,LA
#define HYPER_13 RS(RC(LS(LGUI)))   // hyper  RS,RC,LS,LG
#define HYPER_14 RS(RC(LC(LALT)))   // hyper  RS,RC,LC,LA
#define HYPER_15 RS(RC(LC(LGUI)))   // hyper  RS,RC,LC,LG
#define HYPER_16 RS(RC(LA(LGUI)))   // hyper  RS,RC,LA,LG
#define HYPER_17 RS(RA(RG(LSHFT)))  // hyper  RS,RA,RG,LS
#define HYPER_18 RS(RA(RG(LCTRL)))  // hyper  RS,RA,RG,LC
#define HYPER_19 RS(RA(RG(LALT)))   // hyper  RS,RA,RG,LA
#define HYPER_20 RS(RA(RG(LGUI)))   // hyper  RS,RA,RG,LG
#define HYPER_21 RS(RA(LS(LCTRL)))  // hyper  RS,RA,LS,LC
#define HYPER_22 RS(RA(LS(LALT)))   // hyper  RS,RA,LS,LA
#define HYPER_23 RS(RA(LS(LGUI)))   // hyper  RS,RA,LS,LG
#define HYPER_24 RS(RA(LC(LALT)))   // hyper  RS,RA,LC,LA
#define HYPER_25 RS(RA(LC(LGUI)))   // hyper  RS,RA,LC,LG
#define HYPER_26 RS(RA(LA(LGUI)))   // hyper  RS,RA,LA,LG
#define HYPER_27 RS(RG(LS(LCTRL)))  // hyper  RS,RG,LS,LC
#define HYPER_28 RS(RG(LS(LALT)))   // hyper  RS,RG,LS,LA
#define HYPER_29 RS(RG(LS(LGUI)))   // hyper  RS,RG,LS,LG
#define HYPER_30 RS(RG(LC(LALT)))   // hyper  RS,RG,LC,LA
#define HYPER_31 RS(RG(LC(LGUI)))   // hyper  RS,RG,LC,LG
#define HYPER_32 RS(RG(LA(LGUI)))   // hyper  RS,RG,LA,LG
#define HYPER_33 RS(LS(LC(LALT)))   // hyper  RS,LS,LC,LA
#define HYPER_34 RS(LS(LC(LGUI)))   // hyper  RS,LS,LC,LG
#define HYPER_35 RS(LS(LA(LGUI)))   // hyper  RS,LS,LA,LG
#define HYPER_36 RS(LC(LA(LGUI)))   // hyper  RS,LC,LA,LG
#define HYPER_37 RC(RA(RG(LSHFT)))  // hyper  RC,RA,RG,LS
#define HYPER_38 RC(RA(RG(LCTRL)))  // hyper  RC,RA,RG,LC
#define HYPER_39 RC(RA(RG(LALT)))   // hyper  RC,RA,RG,LA
#define HYPER_40 RC(RA(RG(LGUI)))   // hyper  RC,RA,RG,LG
#define HYPER_41 RC(RA(LS(LCTRL)))  // hyper  RC,RA,LS,LC
#define HYPER_42 RC(RA(LS(LALT)))   // hyper  RC,RA,LS,LA
#define HYPER_43 RC(RA(LS(LGUI)))   // hyper  RC,RA,LS,LG
#define HYPER_44 RC(RA(LC(LALT)))   // hyper  RC,RA,LC,LA
#define HYPER_45 RC(RA(LC(LGUI)))   // hyper  RC,RA,LC,LG
#define HYPER_46 RC(RA(LA(LGUI)))   // hyper  RC,RA,LA,LG
#define HYPER_47 RC(RG(LS(LCTRL)))  // hyper  RC,RG,LS,LC
#define HYPER_48 RC(RG(LS(LALT)))   // hyper  RC,RG,LS,LA
#define HYPER_49 RC(RG(LS(LGUI)))   // hyper  RC,RG,LS,LG
#define HYPER_50 RC(RG(LC(LALT)))   // hyper  RC,RG,LC,LA
#define HYPER_51 RC(RG(LC(LGUI)))   // hyper  RC,RG,LC,LG
#define HYPER_52 RC(RG(LA(LGUI)))   // hyper  RC,RG,LA,LG
#define HYPER_53 RC(LS(LC(LALT)))   // hyper  RC,LS,LC,LA
#define HYPER_54 RC(LS(LC(LGUI)))   // hyper  RC,LS,LC,LG
#define HYPER_55 RC(LS(LA(LGUI)))   // hyper  RC,LS,LA,LG
#define HYPER_56 RC(LC(LA(LGUI)))   // hyper  RC,LC,LA,LG
#define HYPER_57 RA(RG(LS(LCTRL)))  // hyper  RA,RG,LS,LC
#define HYPER_58 RA(RG(LS(LALT)))   // hyper  RA,RG,LS,LA
#define HYPER_59 RA(RG(LS(LGUI)))   // hyper  RA,RG,LS,LG
#define HYPER_60 RA(RG(LC(LALT)))   // hyper  RA,RG,LC,LA
#define HYPER_61 RA(RG(LC(LGUI)))   // hyper  RA,RG,LC,LG
#define HYPER_62 RA(RG(LA(LGUI)))   // hyper  RA,RG,LA,LG
#define HYPER_63 RA(LS(LC(LALT)))   // hyper  RA,LS,LC,LA
#define HYPER_64 RA(LS(LC(LGUI)))   // hyper  RA,LS,LC,LG

// SKQ_LEFT_SHIFT
#define HYPER_65 RA(LS(LA(LGUI)))   // hyper  RA,LS,LA,LG
#define HYPER_66 RA(LC(LA(LGUI)))   // hyper  RA,LC,LA,LG
#define HYPER_67 RG(LS(LC(LALT)))   // hyper  RG,LS,LC,LA
#define HYPER_68 RG(LS(LC(LGUI)))   // hyper  RG,LS,LC,LG
#define HYPER_69 RG(LS(LA(LGUI)))   // hyper  RG,LS,LA,LG
#define HYPER_70 RG(LC(LA(LGUI)))   // hyper  RG,LC,LA,LG
#define HYPER_71 RC(RA(RG(RS(LALT))))   // hyper  // RC RA RG RS LA
#define HYPER_72 RC(RA(RG(RS(LSHFT))))   // hyper  // RC RA RG RS LS
#define HYPER_73 RC(RA(RG(RS(LGUI))))   // hyper  // RC RA RG RS LG
#define HYPER_74 RC(RA(RG(RS(LCTRL))))   // hyper  // RC RA RG RS LC
#define HYPER_75 RC(RA(RG(LA(LSHFT))))   // hyper  // RC RA RG LA LS
#define HYPER_76 RC(RA(RG(LA(LGUI))))   // hyper  // RC RA RG LA LG
#define HYPER_77 RC(RA(RG(LA(LCTRL))))   // hyper  // RC RA RG LA LC
#define HYPER_78 RC(RA(RG(LS(LGUI))))   // hyper  // RC RA RG LS LG
#define HYPER_79 RC(RA(RG(LS(LCTRL))))   // hyper  // RC RA RG LS LC
#define HYPER_80 RC(RA(RG(LG(LCTRL))))   // hyper  // RC RA RG LG LC
#define HYPER_81 RC(RA(RS(LA(LSHFT))))   // hyper  // RC RA RS LA LS
#define HYPER_82 RC(RA(RS(LA(LGUI))))   // hyper  // RC RA RS LA LG
#define HYPER_83 RC(RA(RS(LA(LCTRL))))   // hyper  // RC RA RS LA LC
#define HYPER_84 RC(RA(RS(LS(LGUI))))   // hyper  // RC RA RS LS LG
#define HYPER_85 RC(RA(RS(LS(LCTRL))))   // hyper  // RC RA RS LS LC
#define HYPER_86 RC(RA(RS(LG(LCTRL))))   // hyper  // RC RA RS LG LC
#define HYPER_87 RC(RA(LA(LS(LGUI))))   // hyper  // RC RA LA LS LG
#define HYPER_88 RC(RA(LA(LS(LCTRL))))   // hyper  // RC RA LA LS LC
#define HYPER_89 RC(RA(LA(LG(LCTRL))))   // hyper  // RC RA LA LG LC
#define HYPER_90 RC(RA(LS(LG(LCTRL))))   // hyper  // RC RA LS LG LC
#define HYPER_91 RC(RG(RS(LA(LSHFT))))   // hyper  // RC RG RS LA LS
#define HYPER_92 RC(RG(RS(LA(LGUI))))   // hyper  // RC RG RS LA LG
#define HYPER_93 RC(RG(RS(LA(LCTRL))))   // hyper  // RC RG RS LA LC
#define HYPER_94 RC(RG(RS(LS(LGUI))))   // hyper  // RC RG RS LS LG

// keys for sticky modifiers(not holding) left red key
#define HYPER_LEFT_RED_126_SEMI(key) RS(LA(LS(LG(LCTRL))))   // hyper  // RS LA LS LG LC
#define HYPER_LEFT_RED_127_COMMA(key) RC(RA(RG(RS(LA(LSHFT)))))   // hyper  // RC RA RG RS LA LS
#define HYPER_LEFT_RED_128_DOT(key) RC(RA(RG(RS(LA(LGUI)))))   // hyper  // RC RA RG RS LA LG
#define HYPER_LEFT_RED_129_P(key) RC(RA(RG(RS(LA(LCTRL)))))   // hyper  // RC RA RG RS LA LC
#define HYPER_LEFT_RED_130_Y(key) RC(RA(RG(RS(LS(LGUI)))))   // hyper  // RC RA RG RS LS LG
#define HYPER_LEFT_RED_131_F(key) RC(RA(RG(RS(LS(LCTRL)))))   // hyper  // RC RA RG RS LS LC
#define HYPER_LEFT_RED_132_G(key) RC(RA(RG(RS(LG(LCTRL)))))   // hyper  // RC RA RG RS LG LC
#define HYPER_LEFT_RED_133_R(key) RC(RA(RG(LA(LS(LGUI)))))   // hyper  // RC RA RG LA LS LG
#define HYPER_LEFT_RED_134_C(key) RC(RA(RG(LA(LS(LCTRL)))))   // hyper  // RC RA RG LA LS LC
#define HYPER_LEFT_RED_135_L(key) RC(RA(RG(LA(LG(LCTRL)))))   // hyper  // RC RA RG LA LG LC
#define HYPER_LEFT_RED_136_A(key) RC(RA(RG(LS(LG(LCTRL)))))   // hyper  // RC RA RG LS LG LC
#define HYPER_LEFT_RED_137_O(key) RC(RA(RS(LA(LS(LGUI)))))   // hyper  // RC RA RS LA LS LG
#define HYPER_LEFT_RED_138_E(key) RC(RA(RS(LA(LS(LCTRL)))))   // hyper  // RC RA RS LA LS LC
#define HYPER_LEFT_RED_139_U(key) RC(RA(RS(LA(LG(LCTRL)))))   // hyper  // RC RA RS LA LG LC
#define HYPER_LEFT_RED_140_I(key) RC(RA(RS(LS(LG(LCTRL)))))   // hyper  // RC RA RS LS LG LC
#define HYPER_LEFT_RED_141_D(key) RC(RA(LA(LS(LG(LCTRL)))))   // hyper  // RC RA LA LS LG LC
#define HYPER_LEFT_RED_142_H(key) RC(RG(RS(LA(LS(LGUI)))))   // hyper  // RC RG RS LA LS LG
#define HYPER_LEFT_RED_143_T(key) RC(RG(RS(LA(LS(LCTRL)))))   // hyper  // RC RG RS LA LS LC
#define HYPER_LEFT_RED_144_N(key) RC(RG(RS(LA(LG(LCTRL)))))   // hyper  // RC RG RS LA LG LC
#define HYPER_LEFT_RED_145_S(key) RC(RG(RS(LS(LG(LCTRL)))))   // hyper  // RC RG RS LS LG LC
#define HYPER_LEFT_RED_146_APOS(key) RC(RG(LA(LS(LG(LCTRL)))))   // hyper  // RC RG LA LS LG LC
#define HYPER_LEFT_RED_147_Q(key) RC(RS(LA(LS(LG(LCTRL)))))   // hyper  // RC RS LA LS LG LC
#define HYPER_LEFT_RED_148_J(key) RA(RG(RS(LA(LS(LGUI)))))   // hyper  // RA RG RS LA LS LG
#define HYPER_LEFT_RED_149_K(key) RA(RG(RS(LA(LS(LCTRL)))))   // hyper  // RA RG RS LA LS LC
#define HYPER_LEFT_RED_150_X(key) RA(RG(RS(LA(LG(LCTRL)))))   // hyper  // RA RG RS LA LG LC
#define HYPER_LEFT_RED_151_B(key) RA(RG(RS(LS(LG(LCTRL)))))   // hyper  // RA RG RS LS LG LC
#define HYPER_LEFT_RED_152_M(key) RA(RG(LA(LS(LG(LCTRL)))))   // hyper  // RA RG LA LS LG LC
#define HYPER_LEFT_RED_153_W(key) RA(RS(LA(LS(LG(LCTRL)))))   // hyper  // RA RS LA LS LG LC
#define HYPER_LEFT_RED_154_V(key) RG(RS(LA(LS(LG(LCTRL)))))   // hyper  // RG RS LA LS LG LC
#define HYPER_LEFT_RED_125_Z(key)  RG(LA(LS(LG(LCTRL))))   // hyper  // RG LA LS LG LC

// keys for sticky modifiers(not holding) right red key
#define HYPER_RIGHT_RED_95_SEMI(key)   RC(RG(RS(LS(LCTRL))))   // hyper  // RC RG RS LS LC
#define HYPER_RIGHT_RED_96_COMMA(key)   RC(RG(RS(LG(LCTRL))))   // hyper  // RC RG RS LG LC
#define HYPER_RIGHT_RED_97_DOT(key)   RC(RG(LA(LS(LGUI))))   // hyper  // RC RG LA LS LG
#define HYPER_RIGHT_RED_98_P(key)   RC(RG(LA(LS(LCTRL))))   // hyper  // RC RG LA LS LC
#define HYPER_RIGHT_RED_99_Y(key)   RC(RG(LA(LG(LCTRL))))   // hyper  // RC RG LA LG LC
#define HYPER_RIGHT_RED_100_F(key)  RC(RG(LS(LG(LCTRL))))   // hyper  // RC RG LS LG LC
#define HYPER_RIGHT_RED_101_G(key)  RC(RS(LA(LS(LGUI))))   // hyper  // RC RS LA LS LG
#define HYPER_RIGHT_RED_102_R(key)  RC(RS(LA(LS(LCTRL))))   // hyper  // RC RS LA LS LC
#define HYPER_RIGHT_RED_103_C(key)  RC(RS(LA(LG(LCTRL))))   // hyper  // RC RS LA LG LC
#define HYPER_RIGHT_RED_104_L(key)  RC(RS(LS(LG(LCTRL))))   // hyper  // RC RS LS LG LC
#define HYPER_RIGHT_RED_105_A(key)  RC(LA(LS(LG(LCTRL))))   // hyper  // RC LA LS LG LC
#define HYPER_RIGHT_RED_106_O(key)  RA(RG(RS(LA(LSHFT))))   // hyper  // RA RG RS LA LS
#define HYPER_RIGHT_RED_107_E(key)  RA(RG(RS(LA(LGUI))))   // hyper  // RA RG RS LA LG
#define HYPER_RIGHT_RED_108_U(key)  RA(RG(RS(LA(LCTRL))))   // hyper  // RA RG RS LA LC
#define HYPER_RIGHT_RED_109_I(key)  RA(RG(RS(LS(LGUI))))   // hyper  // RA RG RS LS LG
#define HYPER_RIGHT_RED_110_D(key)  RA(RG(RS(LS(LCTRL))))   // hyper  // RA RG RS LS LC
#define HYPER_RIGHT_RED_111_H(key)  RA(RG(RS(LG(LCTRL))))   // hyper  // RA RG RS LG LC
#define HYPER_RIGHT_RED_112_T(key)  RA(RG(LA(LS(LGUI))))   // hyper  // RA RG LA LS LG
#define HYPER_RIGHT_RED_113_N(key)  RA(RG(LA(LS(LCTRL))))   // hyper  // RA RG LA LS LC
#define HYPER_RIGHT_RED_114_S(key)  RA(RG(LA(LG(LCTRL))))   // hyper  // RA RG LA LG LC
#define HYPER_RIGHT_RED_115_APOS(key)  RA(RG(LS(LG(LCTRL))))   // hyper  // RA RG LS LG LC
#define HYPER_RIGHT_RED_116_Q(key)  RA(RS(LA(LS(LGUI))))   // hyper  // RA RS LA LS LG
#define HYPER_RIGHT_RED_117_J(key)  RA(RS(LA(LS(LCTRL))))   // hyper  // RA RS LA LS LC
#define HYPER_RIGHT_RED_118_K(key)  RA(RS(LA(LG(LCTRL))))   // hyper  // RA RS LA LG LC
#define HYPER_RIGHT_RED_119_X(key)  RA(RS(LS(LG(LCTRL))))   // hyper  // RA RS LS LG LC
#define HYPER_RIGHT_RED_120_B(key)  RA(LA(LS(LG(LCTRL))))   // hyper  // RA LA LS LG LC
#define HYPER_RIGHT_RED_121_M(key)  RG(RS(LA(LS(LGUI))))   // hyper  // RG RS LA LS LG
#define HYPER_RIGHT_RED_122_W(key)  RG(RS(LA(LS(LCTRL))))   // hyper  // RG RS LA LS LC
#define HYPER_RIGHT_RED_123_V(key)  RG(RS(LA(LG(LCTRL))))   // hyper  // RG RS LA LG LC
#define HYPER_RIGHT_RED_124_Z(key)  RG(RS(LS(LG(LCTRL))))   // hyper  // RG RS LS LG LC


behaviors {

    //////////////////////////////////////////////////////////////////////////
    //
    // Miryoku layers and home row mods (ported from my QMK endgame)
    // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
    // - https://github.com/urob/zmk-config#timeless-homerow-mods
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for the pinky, ring, and middle fingers (which are assigned to Super,
    // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
    //
    #ifndef HOMEY_HOLDING_TYPE
    #define HOMEY_HOLDING_TYPE "tap-preferred"
    #endif

    //
    // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
    // home row mod keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
    //
    #ifndef HOMEY_HOLDING_TIME
    #define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
    #endif

    //
    // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #ifndef HOMEY_STREAK_DECAY
    #define HOMEY_STREAK_DECAY 170 // global-quick-tap-ms
    #endif

    //
    // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef HOMEY_REPEAT_DECAY
    #define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // SHIFT_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for index fingers (which Miryoku assigns to Shift) on home row keys.
    //
    // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
    // allows faster activation of the Shift modifier (without having to wait
    // for the modified key to be released as the "balanced" flavor requires).
    // Typing streaks and the `hold-trigger-on-release` setting are disabled
    // for the index fingers so as not to hinder their speed and dexterity.
    //
    #ifndef SHIFT_HOLDING_TYPE
    #define SHIFT_HOLDING_TYPE "tap-preferred"
    #endif

    //
    // SHIFT_HOLDING_TIME defines how long you need to hold (milliseconds)
    // index finger keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
    //
    // CAUTION: You'll need to perform inward rolls from pinky->ring->middle
    // fingers toward the index fingers when activating multiple modifiers
    // because `hold-trigger-on-release` is disabled for the index fingers.
    // Otherwise, you may be surprised that the index fingers' modifier is
    // sent immediately without the rest of your multi-mod chord when you
    // perform outward rolls from your index fingers toward your pinkies.
    //
    #ifndef SHIFT_HOLDING_TIME
    #define SHIFT_HOLDING_TIME 170
    #endif

    //
    // SHIFT_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #ifndef SHIFT_STREAK_DECAY
    #define SHIFT_STREAK_DECAY 70 // global-quick-tap-ms
    #endif

    //
    // SHIFT_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef SHIFT_REPEAT_DECAY
    #define SHIFT_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for the thumbs (which are assigned to 6 layers in the Miryoku system).
    //
    // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
    // activation for the symbol layer (if the tapped symbol key is released
    // while the thumb layer key is still held down) for quicker programming.
    //
    #ifndef THUMB_HOLDING_TYPE
    #define THUMB_HOLDING_TYPE "balanced"
    #endif

    //
    // THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
    // a thumb key to activate a layer.  Shorter holds are treated as taps.
    //
    #ifndef THUMB_HOLDING_TIME
    #define THUMB_HOLDING_TIME 200
    #endif

    //
    // THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef THUMB_REPEAT_DECAY
    #define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
    // the space thumb key to activate.  Shorter holds are treated as taps.
    //
    #ifndef SPACE_HOLDING_TIME
    #define SPACE_HOLDING_TIME 170
    #endif

    //
    // SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef SPACE_REPEAT_DECAY
    #define SPACE_REPEAT_DECAY 200 // "tap then hold" for key auto-repeat
    #endif

    //
    // Glove80 key positions index for positional hold-tap
    // - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
    // - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
    //
    // |------------------------|------------------------|
    // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
    // |                        |                        |
    // |  0  1  2  3  4         |          5  6  7  8  9 |
    // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
    // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
    // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
    // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
    // | 64 65 66 67 68         |         75 76 77 78 79 |
    // |                69 52   |   57 74                |
    // |                 70 53  |  56 73                 |
    // |                  71 54 | 55 72                  |
    // |------------------------|------------------------|
    //
    #define LEFT_HAND_KEYS      \
          0  1  2  3  4         \
         10 11 12 13 14 15      \
         22 23 24 25 26 27      \
         34 35 36 37 38 39      \
         46 47 48 49 50 51      \
         64 65 66 67 68
    #define RIGHT_HAND_KEYS     \
                                           5  6  7  8  9 \
                                       16 17 18 19 20 21 \
                                       28 29 30 31 32 33 \
                                       40 41 42 43 44 45 \
                                       58 59 60 61 62 63 \
                                          75 76 77 78 79
    #define THUMB_KEYS          \
                        69 52       57 74                \
                         70 53     56 73                 \
                          71 54   55 72

    //
    // Home row mod-tap keys for all except index fingers
    //
    homey_left: miryoku_home_row_mods_left_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_LEFT_HAND";
        flavor = HOMEY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_HOLDING_TIME>;
        quick-tap-ms = <HOMEY_REPEAT_DECAY>;
        require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    homey_right: miryoku_home_row_mods_right_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_RIGHT_HAND";
        flavor = HOMEY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_HOLDING_TIME>;
        quick-tap-ms = <HOMEY_REPEAT_DECAY>;
        require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };

    //
    // Special home row mod-tap keys for the index fingers
    //
    shift_left: miryoku_home_row_mods_left_shift_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_LEFT_SHIFT_SHIFT";
        flavor = SHIFT_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <SHIFT_HOLDING_TIME>;
        quick-tap-ms = <SHIFT_REPEAT_DECAY>;
        require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    shift_right: miryoku_home_row_mods_right_shift_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_RIGHT_SHIFT_SHIFT";
        flavor = SHIFT_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <SHIFT_HOLDING_TIME>;
        quick-tap-ms = <SHIFT_REPEAT_DECAY>;
        require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };

    //
    // Thumb cluster hold-tap keys for Miryoku layers
    //
    thumb: miryoku_thumb_layer {
        compatible = "zmk,behavior-hold-tap";
        label = "MIRYOKU_THUMB_LAYER";
        flavor = THUMB_HOLDING_TYPE;
        tapping-term-ms = <THUMB_HOLDING_TIME>;
        quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
        //global-quick-tap; // no typing streak
        //retro-tap; // don't allow slow (hold-like) taps
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };
    space: miryoku_thumb_layer_spacebar {
        compatible = "zmk,behavior-hold-tap";
        label = "MIRYOKU_THUMB_LAYER_SPACEBAR";
        flavor = THUMB_HOLDING_TYPE;
        tapping-term-ms = <SPACE_HOLDING_TIME>;
        quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
        //global-quick-tap; // no typing streak
        retro-tap; // allow slow (hold-like) taps
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };

    //////////////////////////////////////////////////////////////////////////
    //
    // Custom shifted pairs
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // Shift + CapsWord = CapsLock
    //
    cappy: capsword_and_capslock {
        compatible = "zmk,behavior-mod-morph";
        label = "CAPSWORD_AND_CAPSLOCK";
        #binding-cells = <0>;
        bindings = <&caps_word>, <&kp CAPSLOCK>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //
    // Custom shifted pairs for the Engram layout
    // - https://engram.dev/
    // - https://sunaku.github.io/engram-keyboard-layout.html
    //
    engram_1: engram_one_and_pipe {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_ONE_AND_PIPE";
        #binding-cells = <0>;
        bindings = <&kp N1>, <&kp PIPE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_2: engram_two_and_equal {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_TWO_AND_EQUAL";
        #binding-cells = <0>;
        bindings = <&kp N2>, <&kp EQUAL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_3: engram_three_and_tilde {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_THREE_AND_TILDE";
        #binding-cells = <0>;
        bindings = <&kp N3>, <&kp TILDE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_4: engram_four_and_plus {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_FOUR_AND_PLUS";
        #binding-cells = <0>;
        bindings = <&kp N4>, <&kp PLUS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_5: engram_five_and_less_than {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_FIVE_AND_LESS_THAN";
        #binding-cells = <0>;
        bindings = <&kp N5>, <&kp LESS_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_6: engram_six_and_greater_than {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SIX_AND_GREATER_THAN";
        #binding-cells = <0>;
        bindings = <&kp N6>, <&kp GREATER_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_7: engram_seven_and_caret {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SEVEN_AND_CARET";
        #binding-cells = <0>;
        bindings = <&kp N7>, <&kp CARET>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_8: engram_eight_and_ampersand {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_EIGHT_AND_AMPERSAND";
        #binding-cells = <0>;
        bindings = <&kp N8>, <&kp AMPERSAND>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_9: engram_nine_and_percent {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_NINE_AND_PERCENT";
        #binding-cells = <0>;
        bindings = <&kp N9>, <&kp PERCENT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_0: engram_zero_and_asterisk {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_ZERO_AND_ASTERISK";
        #binding-cells = <0>;
        bindings = <&kp N0>, <&kp ASTERISK>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_apos: engram_apostrophe_and_left_parenthesis {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_APOSTROPHE_AND_LEFT_PARENTHESIS";
        #binding-cells = <0>;
        bindings = <&kp APOSTROPHE>, <&kp LEFT_PARENTHESIS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_dquote: engram_double_quotes_and_right_parenthesis {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_DOUBLE_QUOTES_AND_RIGHT_PARENTHESIS";
        #binding-cells = <0>;
        bindings = <&kp DOUBLE_QUOTES>, <&kp RIGHT_PARENTHESIS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_comma: engram_comma_and_semicolon {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_COMMA_AND_SEMICOLON";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMICOLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_period: engram_period_and_colon {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_PERIOD_AND_COLON";
        #binding-cells = <0>;
        bindings = <&kp PERIOD>, <&kp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_question: engram_question_and_exclamation {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_QUESTION_AND_EXCLAMATION";
        #binding-cells = <0>;
        bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_hash: engram_hash_and_dollar {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_HASH_AND_DOLLAR";
        #binding-cells = <0>;
        bindings = <&kp HASH>, <&kp DOLLAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_at: engram_at_and_grave {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_AT_AND_GRAVE";
        #binding-cells = <0>;
        bindings = <&kp AT>, <&kp GRAVE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_slash: engram_slash_and_backslash {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SLASH_AND_BACKSLASH";
        #binding-cells = <0>;
        bindings = <&kp SLASH>, <&kp BACKSLASH>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //////////////////////////////////////////////////////////////////////////
    //
    // ZMK global overrides
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // CapsWord - ported from Pascal Getreuer's extension for QMK
    // - https://zmk.dev/docs/behaviors/caps-word
    // - https://getreuer.info/posts/keyboards/caps-word/index.html
    //
    behavior_caps_word {
        continue-list = <
            UNDERSCORE MINUS
            BACKSPACE DELETE
            N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
        >;
    };

};

macros {

    //////////////////////////////////////////////////////////////////////////
    //
    // Approximation of Pascal Getreuer's Select Word macro from QMK
    // - https://getreuer.info/posts/keyboards/select-word/index.html
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
    // after moving the cursor before it selects a word.  A larger delay
    // may allow the macro to move to the next word upon each invocation.
    //
    #ifndef SELECT_WORD_DELAY
    #define SELECT_WORD_DELAY 1
    #endif

    ZMK_MACRO(select_none,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
    )

    //
    // select a word (jumps to next word upon each successive invocation)
    //
    select_word: select_word {
        compatible = "zmk,behavior-mod-morph";
        label = "SELECT_WORD";
        #binding-cells = <0>;
        bindings = <&select_word_right>, <&select_word_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(select_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
    )
    ZMK_MACRO(select_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
    )

    //
    // extend current selection by one word
    //
    extend_word: extend_word {
        compatible = "zmk,behavior-mod-morph";
        label = "EXTEND_WORD";
        #binding-cells = <0>;
        bindings = <&extend_word_right>, <&extend_word_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(extend_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LC(LS(RIGHT))>;
    )
    ZMK_MACRO(extend_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LC(LS(LEFT))>;
    )

    //
    // select current line
    //
    select_line: select_line {
        compatible = "zmk,behavior-mod-morph";
        label = "SELECT_LINE";
        #binding-cells = <0>;
        bindings = <&select_line_right>, <&select_line_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(select_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp HOME &kp LS(END)>;
    )
    ZMK_MACRO(select_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp END &kp LS(HOME)>;
    )

    //
    // extend current selection by one line
    //
    extend_line: extend_line {
        compatible = "zmk,behavior-mod-morph";
        label = "EXTEND_LINE";
        #binding-cells = <0>;
        bindings = <&extend_line_right>, <&extend_line_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(extend_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(DOWN) &kp LS(END)>;
    )
    ZMK_MACRO(extend_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(UP) &kp LS(HOME)>;
    )

    //////////////////////////////////////////////////////////////////////////
    //
    // World layer - international characters
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // UNICODE_TARGET_OS defines which operating system you're targeting
    // for use with the UNICODE() macro.  This is needed because each OS
    // has different shortcuts for typing Unicode characters as hexcodes.
    //
    // NOTE: You may need to enable Unicode hexadecimal input in your OS:
    // - https://ladedu.com/how-to-enter-unicode-characters-on-a-mac/
    // - https://unicode-explorer.com/articles/how-to-type-unicode-characters-in-linux
    // - https://unicode-explorer.com/articles/how-to-type-unicode-characters-in-windows
    //
    #ifndef UNICODE_TARGET_OS
    #define UNICODE_TARGET_OS 1 // linux
    //#define UNICODE_TARGET_OS 2 // macos
    //#define UNICODE_TARGET_OS 3 // windows
    #endif

    //
    // UNICODE_TAP_DELAY defines how long the macro waits (milliseconds)
    // between keystrokes while inputting the Unicode codepoint shortcut.
    //
    #ifndef UNICODE_TAP_DELAY
    #define UNICODE_TAP_DELAY 1
    #endif

    //
    // UNICODE_SEQ_DELAY defines how long the macro waits (milliseconds)
    // between emitting Unicode codepoints in multi-codepoint characters.
    //
    #ifndef UNICODE_SEQ_DELAY
    #define UNICODE_SEQ_DELAY 10
    #endif

    #define UNICODE(name, ...) \
        ZMK_MACRO(name, \
            wait-ms = <UNICODE_TAP_DELAY>; \
            tap-ms = <UNICODE_TAP_DELAY>; \
            bindings = __VA_ARGS__; \
        )

    //
    // NOTE: edit the emoji.yaml file and run `rake` to generate this:
    //

    //
    // codepoints
    //

      /* ° */ UNICODE(world_degree_sign,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp B &kp N0 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp N0>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp KP_N0>, <&macro_release &kp LALT>
        #endif
      )

      /* § */ UNICODE(world_section_sign,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp A &kp N7 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp N7>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp KP_N7>, <&macro_release &kp LALT>
        #endif
      )

      /* ¶ */ UNICODE(world_paragraph_sign,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp B &kp N6 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp N6>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp KP_N6>, <&macro_release &kp LALT>
        #endif
      )

      /* º */ UNICODE(world_o_ordinal,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp B &kp A &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp A>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp A>, <&macro_release &kp LALT>
        #endif
      )

      /* ª */ UNICODE(world_a_ordinal,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp A &kp A &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp A>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp A>, <&macro_release &kp LALT>
        #endif
      )

      /* ¡ */ UNICODE(world_exclaim_left,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp A &kp N1 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp N1>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp KP_N1>, <&macro_release &kp LALT>
        #endif
      )

      /* ¿ */ UNICODE(world_question_left,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp B &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp F>, <&macro_release &kp LALT>
        #endif
      )

    //
    // characters
    //

      /* ç */ UNICODE(world_c_cedilla_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp N7 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N7>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N7>, <&macro_release &kp LALT>
        #endif
      )

      /* Ç */ UNICODE(world_c_cedilla_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp N7 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N7>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N7>, <&macro_release &kp LALT>
        #endif
      )

        world_c_cedilla: world_c_cedilla {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_C_CEDILLA";
            #binding-cells = <0>;
            bindings = <&world_c_cedilla_lower>, <&world_c_cedilla_upper>;
            mods = <MOD_LSFT>;
        };

      /* í */ UNICODE(world_i_acute_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp D &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp D>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp D>, <&macro_release &kp LALT>
        #endif
      )

      /* Í */ UNICODE(world_i_acute_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp D &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp D>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp D>, <&macro_release &kp LALT>
        #endif
      )

        world_i_acute: world_i_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_I_ACUTE";
            #binding-cells = <0>;
            bindings = <&world_i_acute_lower>, <&world_i_acute_upper>;
            mods = <MOD_LSFT>;
        };

      /* ï */ UNICODE(world_i_diaeresis_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* Ï */ UNICODE(world_i_diaeresis_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp F>, <&macro_release &kp LALT>
        #endif
      )

        world_i_diaeresis: world_i_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_I_DIAERESIS";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis_lower>, <&world_i_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };

      /* î */ UNICODE(world_i_circumflex_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp E &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp E>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp E>, <&macro_release &kp LALT>
        #endif
      )

      /* Î */ UNICODE(world_i_circumflex_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp E &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp E>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp E>, <&macro_release &kp LALT>
        #endif
      )

        world_i_circumflex: world_i_circumflex {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_I_CIRCUMFLEX";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex_lower>, <&world_i_circumflex_upper>;
            mods = <MOD_LSFT>;
        };

      /* ì */ UNICODE(world_i_grave_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp C &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp C>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp C>, <&macro_release &kp LALT>
        #endif
      )

      /* Ì */ UNICODE(world_i_grave_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp C &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp C>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp C>, <&macro_release &kp LALT>
        #endif
      )

        world_i_grave: world_i_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_I_GRAVE";
            #binding-cells = <0>;
            bindings = <&world_i_grave_lower>, <&world_i_grave_upper>;
            mods = <MOD_LSFT>;
        };

      /* é */ UNICODE(world_e_acute_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp N9 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N9>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N9>, <&macro_release &kp LALT>
        #endif
      )

      /* É */ UNICODE(world_e_acute_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp N9 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N9>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N9>, <&macro_release &kp LALT>
        #endif
      )

        world_e_acute: world_e_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_E_ACUTE";
            #binding-cells = <0>;
            bindings = <&world_e_acute_lower>, <&world_e_acute_upper>;
            mods = <MOD_LSFT>;
        };

      /* ë */ UNICODE(world_e_diaeresis_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp B &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp B>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp B>, <&macro_release &kp LALT>
        #endif
      )

      /* Ë */ UNICODE(world_e_diaeresis_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp B &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp B>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp B>, <&macro_release &kp LALT>
        #endif
      )

        world_e_diaeresis: world_e_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_E_DIAERESIS";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis_lower>, <&world_e_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };

      /* ê */ UNICODE(world_e_circumflex_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp A &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp A>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp A>, <&macro_release &kp LALT>
        #endif
      )

      /* Ê */ UNICODE(world_e_circumflex_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp A &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp A>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp A>, <&macro_release &kp LALT>
        #endif
      )

        world_e_circumflex: world_e_circumflex {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_E_CIRCUMFLEX";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex_lower>, <&world_e_circumflex_upper>;
            mods = <MOD_LSFT>;
        };

      /* è */ UNICODE(world_e_grave_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp N8 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N8>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N8>, <&macro_release &kp LALT>
        #endif
      )

      /* È */ UNICODE(world_e_grave_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp N8 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N8>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N8>, <&macro_release &kp LALT>
        #endif
      )

        world_e_grave: world_e_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_E_GRAVE";
            #binding-cells = <0>;
            bindings = <&world_e_grave_lower>, <&world_e_grave_upper>;
            mods = <MOD_LSFT>;
        };

      /* æ */ UNICODE(world_e_ae_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp N6 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N6>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N6>, <&macro_release &kp LALT>
        #endif
      )

      /* Æ */ UNICODE(world_e_ae_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp N6 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N6>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N6>, <&macro_release &kp LALT>
        #endif
      )

        world_e_ae: world_e_ae {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_E_AE";
            #binding-cells = <0>;
            bindings = <&world_e_ae_lower>, <&world_e_ae_upper>;
            mods = <MOD_LSFT>;
        };

      /* á */ UNICODE(world_a_acute_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp N1 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N1>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N1>, <&macro_release &kp LALT>
        #endif
      )

      /* Á */ UNICODE(world_a_acute_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp N1 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N1>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N1>, <&macro_release &kp LALT>
        #endif
      )

        world_a_acute: world_a_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_A_ACUTE";
            #binding-cells = <0>;
            bindings = <&world_a_acute_lower>, <&world_a_acute_upper>;
            mods = <MOD_LSFT>;
        };

      /* ä */ UNICODE(world_a_diaeresis_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp N4 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N4>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N4>, <&macro_release &kp LALT>
        #endif
      )

      /* Ä */ UNICODE(world_a_diaeresis_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp N4 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N4>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N4>, <&macro_release &kp LALT>
        #endif
      )

        world_a_diaeresis: world_a_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_A_DIAERESIS";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis_lower>, <&world_a_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };

      /* â */ UNICODE(world_a_circumflex_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp N2 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N2>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N2>, <&macro_release &kp LALT>
        #endif
      )

      /* Â */ UNICODE(world_a_circumflex_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp N2 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N2>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N2>, <&macro_release &kp LALT>
        #endif
      )

        world_a_circumflex: world_a_circumflex {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_A_CIRCUMFLEX";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex_lower>, <&world_a_circumflex_upper>;
            mods = <MOD_LSFT>;
        };

      /* à */ UNICODE(world_a_grave_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp N0 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N0>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N0>, <&macro_release &kp LALT>
        #endif
      )

      /* À */ UNICODE(world_a_grave_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp N0 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N0>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N0>, <&macro_release &kp LALT>
        #endif
      )

        world_a_grave: world_a_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_A_GRAVE";
            #binding-cells = <0>;
            bindings = <&world_a_grave_lower>, <&world_a_grave_upper>;
            mods = <MOD_LSFT>;
        };

      /* ã */ UNICODE(world_a_tilde_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp N3 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N3>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N3>, <&macro_release &kp LALT>
        #endif
      )

      /* Ã */ UNICODE(world_a_tilde_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp N3 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N3>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N3>, <&macro_release &kp LALT>
        #endif
      )

        world_a_tilde: world_a_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_A_TILDE";
            #binding-cells = <0>;
            bindings = <&world_a_tilde_lower>, <&world_a_tilde_upper>;
            mods = <MOD_LSFT>;
        };

      /* å */ UNICODE(world_a_ring_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp E &kp N5 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N5>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N5>, <&macro_release &kp LALT>
        #endif
      )

      /* Å */ UNICODE(world_a_ring_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp C &kp N5 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N5>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N5>, <&macro_release &kp LALT>
        #endif
      )

        world_a_ring: world_a_ring {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_A_RING";
            #binding-cells = <0>;
            bindings = <&world_a_ring_lower>, <&world_a_ring_upper>;
            mods = <MOD_LSFT>;
        };

      /* ý */ UNICODE(world_y_acute_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp D &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp D>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp D>, <&macro_release &kp LALT>
        #endif
      )

      /* Ý */ UNICODE(world_y_acute_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp D &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp D>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp D>, <&macro_release &kp LALT>
        #endif
      )

        world_y_acute: world_y_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_Y_ACUTE";
            #binding-cells = <0>;
            bindings = <&world_y_acute_lower>, <&world_y_acute_upper>;
            mods = <MOD_LSFT>;
        };

      /* ÿ */ UNICODE(world_y_diaeresis_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* Ÿ */ UNICODE(world_y_diaeresis_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp N7 &kp N8 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N1 &kp N7 &kp N8>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp KP_N7 &kp KP_N8>, <&macro_release &kp LALT>
        #endif
      )

        world_y_diaeresis: world_y_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_Y_DIAERESIS";
            #binding-cells = <0>;
            bindings = <&world_y_diaeresis_lower>, <&world_y_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };

      /* ó */ UNICODE(world_o_acute_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp N3 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N3>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N3>, <&macro_release &kp LALT>
        #endif
      )

      /* Ó */ UNICODE(world_o_acute_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp N3 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N3>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N3>, <&macro_release &kp LALT>
        #endif
      )

        world_o_acute: world_o_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O_ACUTE";
            #binding-cells = <0>;
            bindings = <&world_o_acute_lower>, <&world_o_acute_upper>;
            mods = <MOD_LSFT>;
        };

      /* ö */ UNICODE(world_o_diaeresis_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp N6 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N6>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N6>, <&macro_release &kp LALT>
        #endif
      )

      /* Ö */ UNICODE(world_o_diaeresis_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp N6 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N6>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N6>, <&macro_release &kp LALT>
        #endif
      )

        world_o_diaeresis: world_o_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O_DIAERESIS";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis_lower>, <&world_o_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };

      /* ô */ UNICODE(world_o_circumflex_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp N4 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N4>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N4>, <&macro_release &kp LALT>
        #endif
      )

      /* Ô */ UNICODE(world_o_circumflex_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp N4 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N4>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N4>, <&macro_release &kp LALT>
        #endif
      )

        world_o_circumflex: world_o_circumflex {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O_CIRCUMFLEX";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex_lower>, <&world_o_circumflex_upper>;
            mods = <MOD_LSFT>;
        };

      /* ò */ UNICODE(world_o_grave_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp N2 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N2>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N2>, <&macro_release &kp LALT>
        #endif
      )

      /* Ò */ UNICODE(world_o_grave_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp N2 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N2>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N2>, <&macro_release &kp LALT>
        #endif
      )

        world_o_grave: world_o_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O_GRAVE";
            #binding-cells = <0>;
            bindings = <&world_o_grave_lower>, <&world_o_grave_upper>;
            mods = <MOD_LSFT>;
        };

      /* õ */ UNICODE(world_o_tilde_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp N5 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N5>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N5>, <&macro_release &kp LALT>
        #endif
      )

      /* Õ */ UNICODE(world_o_tilde_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp N5 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N5>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N5>, <&macro_release &kp LALT>
        #endif
      )

        world_o_tilde: world_o_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O_TILDE";
            #binding-cells = <0>;
            bindings = <&world_o_tilde_lower>, <&world_o_tilde_upper>;
            mods = <MOD_LSFT>;
        };

      /* ø */ UNICODE(world_o_slash_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp N8 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N8>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N8>, <&macro_release &kp LALT>
        #endif
      )

      /* Ø */ UNICODE(world_o_slash_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp N8 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N8>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N8>, <&macro_release &kp LALT>
        #endif
      )

        world_o_slash: world_o_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O_SLASH";
            #binding-cells = <0>;
            bindings = <&world_o_slash_lower>, <&world_o_slash_upper>;
            mods = <MOD_LSFT>;
        };

      /* ú */ UNICODE(world_u_acute_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp A &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp A>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp A>, <&macro_release &kp LALT>
        #endif
      )

      /* Ú */ UNICODE(world_u_acute_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp A &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp A>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp A>, <&macro_release &kp LALT>
        #endif
      )

        world_u_acute: world_u_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_U_ACUTE";
            #binding-cells = <0>;
            bindings = <&world_u_acute_lower>, <&world_u_acute_upper>;
            mods = <MOD_LSFT>;
        };

      /* ü */ UNICODE(world_u_diaeresis_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp C &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp C>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp C>, <&macro_release &kp LALT>
        #endif
      )

      /* Ü */ UNICODE(world_u_diaeresis_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp C &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp C>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp C>, <&macro_release &kp LALT>
        #endif
      )

        world_u_diaeresis: world_u_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_U_DIAERESIS";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis_lower>, <&world_u_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };

      /* û */ UNICODE(world_u_circumflex_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp B &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp B>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp B>, <&macro_release &kp LALT>
        #endif
      )

      /* Û */ UNICODE(world_u_circumflex_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp B &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp B>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp B>, <&macro_release &kp LALT>
        #endif
      )

        world_u_circumflex: world_u_circumflex {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_U_CIRCUMFLEX";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex_lower>, <&world_u_circumflex_upper>;
            mods = <MOD_LSFT>;
        };

      /* ù */ UNICODE(world_u_grave_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp N9 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N9>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N9>, <&macro_release &kp LALT>
        #endif
      )

      /* Ù */ UNICODE(world_u_grave_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp N9 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N9>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N9>, <&macro_release &kp LALT>
        #endif
      )

        world_u_grave: world_u_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_U_GRAVE";
            #binding-cells = <0>;
            bindings = <&world_u_grave_lower>, <&world_u_grave_upper>;
            mods = <MOD_LSFT>;
        };

      /* ñ */ UNICODE(world_n_tilde_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp N1 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N1>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N1>, <&macro_release &kp LALT>
        #endif
      )

      /* Ñ */ UNICODE(world_n_tilde_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp D &kp N1 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N1>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N1>, <&macro_release &kp LALT>
        #endif
      )

        world_n_tilde: world_n_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_N_TILDE";
            #binding-cells = <0>;
            bindings = <&world_n_tilde_lower>, <&world_n_tilde_upper>;
            mods = <MOD_LSFT>;
        };

      /* ' */ UNICODE(world_quotes_plain_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N7 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp N2 &kp N7>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7>, <&macro_release &kp LALT>
        #endif
      )

      /* " */ UNICODE(world_quotes_plain_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N2 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp N2 &kp N2>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N2>, <&macro_release &kp LALT>
        #endif
      )

        world_quotes_plain: world_quotes_plain {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_QUOTES_PLAIN";
            #binding-cells = <0>;
            bindings = <&world_quotes_plain_lower>, <&world_quotes_plain_upper>;
            mods = <MOD_LSFT>;
        };

      /* ` */ UNICODE(world_quotes_grave_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N6 &kp N0 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp N6 &kp N0>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N6 &kp KP_N0>, <&macro_release &kp LALT>
        #endif
      )

      /* ´ */ UNICODE(world_quotes_grave_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp B &kp N4 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp N4>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp KP_N4>, <&macro_release &kp LALT>
        #endif
      )

        world_quotes_grave: world_quotes_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_QUOTES_GRAVE";
            #binding-cells = <0>;
            bindings = <&world_quotes_grave_lower>, <&world_quotes_grave_upper>;
            mods = <MOD_LSFT>;
        };

      /* « */ UNICODE(world_quotes_angle_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp A &kp B &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp B>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp B>, <&macro_release &kp LALT>
        #endif
      )

      /* » */ UNICODE(world_quotes_angle_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp B &kp B &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp B>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp B>, <&macro_release &kp LALT>
        #endif
      )

        world_quotes_angle: world_quotes_angle {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_QUOTES_ANGLE";
            #binding-cells = <0>;
            bindings = <&world_quotes_angle_lower>, <&world_quotes_angle_upper>;
            mods = <MOD_LSFT>;
        };

      /* ‘ */ UNICODE(world_quotes_curly1_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp N8 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp N8>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp KP_N8>, <&macro_release &kp LALT>
        #endif
      )

      /* ’ */ UNICODE(world_quotes_curly1_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp N9 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp N9>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp KP_N9>, <&macro_release &kp LALT>
        #endif
      )

        world_quotes_curly1: world_quotes_curly1 {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_QUOTES_CURLY1";
            #binding-cells = <0>;
            bindings = <&world_quotes_curly1_lower>, <&world_quotes_curly1_upper>;
            mods = <MOD_LSFT>;
        };

      /* “ */ UNICODE(world_quotes_curly2_lower,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp C &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp C>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp C>, <&macro_release &kp LALT>
        #endif
      )

      /* ” */ UNICODE(world_quotes_curly2_upper,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp D &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp D>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp D>, <&macro_release &kp LALT>
        #endif
      )

        world_quotes_curly2: world_quotes_curly2 {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_QUOTES_CURLY2";
            #binding-cells = <0>;
            bindings = <&world_quotes_curly2_lower>, <&world_quotes_curly2_upper>;
            mods = <MOD_LSFT>;
        };

    //
    // transforms
    //

        world_i_base: world_i_base {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_I_BASE";
            #binding-cells = <0>;
            bindings = <&world_i_acute>, <&world_i_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_i_LCTL: world_i_LCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_I_LCTL";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis>, <&world_i_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };

        world_i_RCTL: world_i_RCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_I_RCTL";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex>, <&world_i_grave>;
            mods = <(MOD_RSFT)>;
        };

        world_e_base: world_e_base {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_E_BASE";
            #binding-cells = <0>;
            bindings = <&world_e_acute>, <&world_e_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_e_RALT: world_e_RALT {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_E_RALT";
            #binding-cells = <0>;
            bindings = <&world_e_ae>, <&world_e_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_e_LCTL: world_e_LCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_E_LCTL";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis>, <&world_e_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };

        world_e_RCTL: world_e_RCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_E_RCTL";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex>, <&world_e_grave>;
            mods = <(MOD_RSFT)>;
        };

        world_a_base: world_a_base {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_A_BASE";
            #binding-cells = <0>;
            bindings = <&world_a_acute>, <&world_a_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_a_LALT: world_a_LALT {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_A_LALT";
            #binding-cells = <0>;
            bindings = <&world_a_tilde>, <&world_a_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_a_RALT: world_a_RALT {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_A_RALT";
            #binding-cells = <0>;
            bindings = <&world_a_ring>, <&world_a_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_a_LCTL: world_a_LCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_A_LCTL";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis>, <&world_a_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };

        world_a_RCTL: world_a_RCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_A_RCTL";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex>, <&world_a_grave>;
            mods = <(MOD_RSFT)>;
        };

        world_y_base: world_y_base {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_Y_BASE";
            #binding-cells = <0>;
            bindings = <&world_y_acute>, <&world_y_diaeresis>;
            mods = <(MOD_LCTL)>;
        };

        world_o_base: world_o_base {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O_BASE";
            #binding-cells = <0>;
            bindings = <&world_o_acute>, <&world_o_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_o_LALT: world_o_LALT {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O_LALT";
            #binding-cells = <0>;
            bindings = <&world_o_tilde>, <&world_o_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_o_RALT: world_o_RALT {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O_RALT";
            #binding-cells = <0>;
            bindings = <&world_o_slash>, <&world_o_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_o_LCTL: world_o_LCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O_LCTL";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis>, <&world_o_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };

        world_o_RCTL: world_o_RCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O_RCTL";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex>, <&world_o_grave>;
            mods = <(MOD_RSFT)>;
        };

        world_u_base: world_u_base {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_U_BASE";
            #binding-cells = <0>;
            bindings = <&world_u_acute>, <&world_u_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_u_LCTL: world_u_LCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_U_LCTL";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };

        world_u_RCTL: world_u_RCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_U_RCTL";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex>, <&world_u_grave>;
            mods = <(MOD_RSFT)>;
        };

        world_quotes_base: world_quotes_base {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_QUOTES_BASE";
            #binding-cells = <0>;
            bindings = <&world_quotes_plain>, <&world_quotes_LALT>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_quotes_LALT: world_quotes_LALT {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_QUOTES_LALT";
            #binding-cells = <0>;
            bindings = <&world_quotes_angle>, <&world_quotes_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_quotes_LCTL: world_quotes_LCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_QUOTES_LCTL";
            #binding-cells = <0>;
            bindings = <&world_quotes_curly2>, <&world_quotes_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };

        world_quotes_RCTL: world_quotes_RCTL {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_QUOTES_RCTL";
            #binding-cells = <0>;
            bindings = <&world_quotes_curly1>, <&world_quotes_grave>;
            mods = <(MOD_RSFT)>;
        };

    //////////////////////////////////////////////////////////////////////////
    //
    // Emoji layer - modern age pictograms
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // EMOJI_GENDER_SIGN_PRESET defines an Emoji gender sign for use as a
    // convenient inward-rolling shortcut on the home row of the layer.
    //
    #ifndef EMOJI_GENDER_SIGN_PRESET
    //#define EMOJI_GENDER_SIGN_PRESET 0 // neutral
    #define EMOJI_GENDER_SIGN_PRESET 1 // male
    //#define EMOJI_GENDER_SIGN_PRESET 2 // female
    #endif

    //
    // EMOJI_SKIN_TONE_PRESET defines an Emoji skin tone for use as a
    // convenient inward-rolling shortcut on the home row of the layer.
    //
    #ifndef EMOJI_SKIN_TONE_PRESET
    //#define EMOJI_SKIN_TONE_PRESET 0 // neutral
    //#define EMOJI_SKIN_TONE_PRESET 1 // light_skin_tone
    //#define EMOJI_SKIN_TONE_PRESET 2 // medium_light_skin_tone
    //#define EMOJI_SKIN_TONE_PRESET 3 // medium_skin_tone
    #define EMOJI_SKIN_TONE_PRESET 4 // medium_dark_skin_tone
    //#define EMOJI_SKIN_TONE_PRESET 5 // dark_skin_tone
    #endif

    //
    // EMOJI_HAIR_STYLE_PRESET defines an Emoji hair style for use as a
    // convenient inward-rolling shortcut on the home row of the layer.
    //
    #ifndef EMOJI_HAIR_STYLE_PRESET
    //#define EMOJI_HAIR_STYLE_PRESET 0 // neutral
    //#define EMOJI_HAIR_STYLE_PRESET 1 // bald
    //#define EMOJI_HAIR_STYLE_PRESET 2 // red_hair
    //#define EMOJI_HAIR_STYLE_PRESET 3 // curly_hair
    #define EMOJI_HAIR_STYLE_PRESET 4 // white_hair
    #endif

    //
    // NOTE: edit the emoji.yaml file and run `rake` to generate this:
    //

      /* ‍ */ UNICODE(emoji_zwj,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N0 &kp N0 &kp D &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N0 &kp D>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N0 &kp D>, <&macro_release &kp LALT>
        #endif
      )

      /* ♂️ */ UNICODE(emoji_male_sign,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N6 &kp N4 &kp N2 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp N4 &kp N2>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp KP_N4 &kp KP_N2>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* ♀️ */ UNICODE(emoji_female_sign,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N6 &kp N4 &kp N0 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp N4 &kp N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp KP_N4 &kp KP_N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* ➡️ */ UNICODE(emoji_right_arrow,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N7 &kp A &kp N1 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp A &kp N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp A &kp KP_N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* ⬅️ */ UNICODE(emoji_left_arrow,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp B &kp N0 &kp N5 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp B &kp N0 &kp N5>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp B &kp KP_N0 &kp KP_N5>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* 🏻 */ UNICODE(emoji_light_skin_tone,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp B &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp B>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp B>, <&macro_release &kp LALT>
        #endif
      )

      /* 🏼 */ UNICODE(emoji_medium_light_skin_tone,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp C &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp C>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp C>, <&macro_release &kp LALT>
        #endif
      )

      /* 🏽 */ UNICODE(emoji_medium_skin_tone,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp D &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp D>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp D>, <&macro_release &kp LALT>
        #endif
      )

      /* 🏾 */ UNICODE(emoji_medium_dark_skin_tone,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp E &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp E>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp E>, <&macro_release &kp LALT>
        #endif
      )

      /* 🏿 */ UNICODE(emoji_dark_skin_tone,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* 🍼 */ UNICODE(emoji_baby_bottle,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N7 &kp C &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N7 &kp C>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N7 &kp C>, <&macro_release &kp LALT>
        #endif
      )

      /* 👶 */ UNICODE(emoji_baby,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N7 &kp N6 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N7 &kp N6>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N7 &kp KP_N6>, <&macro_release &kp LALT>
        #endif
      )

      /* 👦 */ UNICODE(emoji_boy,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N6 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N6>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N6>, <&macro_release &kp LALT>
        #endif
      )

      /* 👧 */ UNICODE(emoji_girl,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N7 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N7>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N7>, <&macro_release &kp LALT>
        #endif
      )

      /* 👨 */ UNICODE(emoji_man,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N8 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N8>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N8>, <&macro_release &kp LALT>
        #endif
      )

      /* 👩 */ UNICODE(emoji_woman,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N9 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N9>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N9>, <&macro_release &kp LALT>
        #endif
      )

      /* 👴 */ UNICODE(emoji_old_man,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N7 &kp N4 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N7 &kp N4>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N7 &kp KP_N4>, <&macro_release &kp LALT>
        #endif
      )

      /* 👵 */ UNICODE(emoji_old_woman,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N7 &kp N5 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N7 &kp N5>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N7 &kp KP_N5>, <&macro_release &kp LALT>
        #endif
      )

      /* 🦳 */ UNICODE(emoji_white_hair,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N3 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N3>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N3>, <&macro_release &kp LALT>
        #endif
      )

      /* 🦱 */ UNICODE(emoji_curly_hair,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N1 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N1>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N1>, <&macro_release &kp LALT>
        #endif
      )

      /* 🦰 */ UNICODE(emoji_red_hair,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N0 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N0>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N0>, <&macro_release &kp LALT>
        #endif
      )

      /* 🦲 */ UNICODE(emoji_bald,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N2 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N2>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N2>, <&macro_release &kp LALT>
        #endif
      )

      /* 🌑 */ UNICODE(emoji_new_moon,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N1 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N1>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N1>, <&macro_release &kp LALT>
        #endif
      )

      /* 🌒 */ UNICODE(emoji_waxing_crescent_moon,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N2 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N2>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N2>, <&macro_release &kp LALT>
        #endif
      )

      /* 🌓 */ UNICODE(emoji_first_quarter_moon,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N3 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N3>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N3>, <&macro_release &kp LALT>
        #endif
      )

      /* 🌔 */ UNICODE(emoji_waxing_gibbous_moon,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N4 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N4>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N4>, <&macro_release &kp LALT>
        #endif
      )

      /* 🌕 */ UNICODE(emoji_full_moon,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N5 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N5>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N5>, <&macro_release &kp LALT>
        #endif
      )

      /* 🎉 */ UNICODE(emoji_tada,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N8 &kp N9 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N8 &kp N9>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N8 &kp KP_N9>, <&macro_release &kp LALT>
        #endif
      )

      /* 🔥 */ UNICODE(emoji_fire,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N5 &kp N2 &kp N5 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N5 &kp N2 &kp N5>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N5 &kp KP_N2 &kp KP_N5>, <&macro_release &kp LALT>
        #endif
      )

      /* ️❤️ */ UNICODE(emoji_heart,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp N2 &kp N7 &kp N6 &kp N4 &kp ENTER>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N6 &kp N4>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N6 &kp KP_N4>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* 💪 */ UNICODE(emoji_muscle,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp A &kp A &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp A &kp A>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp A &kp A>, <&macro_release &kp LALT>
        #endif
      )

      /* 🧗 */ UNICODE(emoji_person_climbing,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp D &kp N7 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp D &kp N7>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp D &kp KP_N7>, <&macro_release &kp LALT>
        #endif
      )

      /* 🚀 */ UNICODE(emoji_rocket,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N8 &kp N0 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N8 &kp N0>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N8 &kp KP_N0>, <&macro_release &kp LALT>
        #endif
      )

      /* 😎 */ UNICODE(emoji_sunglasses,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N0 &kp E &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N0 &kp E>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N0 &kp E>, <&macro_release &kp LALT>
        #endif
      )

      /* 🤩 */ UNICODE(emoji_star_struck,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N2 &kp N9 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N2 &kp N9>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N2 &kp KP_N9>, <&macro_release &kp LALT>
        #endif
      )

      /* 😂 */ UNICODE(emoji_joy,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N0 &kp N2 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N0 &kp N2>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N0 &kp KP_N2>, <&macro_release &kp LALT>
        #endif
      )

      /* 😰 */ UNICODE(emoji_cold_sweat,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N3 &kp N0 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N3 &kp N0>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N3 &kp KP_N0>, <&macro_release &kp LALT>
        #endif
      )

      /* 😱 */ UNICODE(emoji_scream,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N3 &kp N1 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N3 &kp N1>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N3 &kp KP_N1>, <&macro_release &kp LALT>
        #endif
      )

      /* 🤯 */ UNICODE(emoji_exploding_head,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N2 &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N2 &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N2 &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* 🫰 */ UNICODE(emoji_snap_fingers,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp A &kp F &kp N0 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp A &kp F &kp N0>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp A &kp F &kp KP_N0>, <&macro_release &kp LALT>
        #endif
      )

      /* 👌 */ UNICODE(emoji_ok_hand,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N4 &kp C &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N4 &kp C>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N4 &kp C>, <&macro_release &kp LALT>
        #endif
      )

      /* 🙏 */ UNICODE(emoji_pray,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* 😅 */ UNICODE(emoji_sweat_smile,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N0 &kp N5 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N0 &kp N5>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N0 &kp KP_N5>, <&macro_release &kp LALT>
        #endif
      )

      /* 😞 */ UNICODE(emoji_disappointed,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N1 &kp E &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N1 &kp E>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N1 &kp E>, <&macro_release &kp LALT>
        #endif
      )

      /* 🤔 */ UNICODE(emoji_thinking,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N1 &kp N4 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N1 &kp N4>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N1 &kp KP_N4>, <&macro_release &kp LALT>
        #endif
      )

      /* 💁 */ UNICODE(emoji_person_tipping_hand,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N8 &kp N1 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N8 &kp N1>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N8 &kp KP_N1>, <&macro_release &kp LALT>
        #endif
      )

      /* 🙆 */ UNICODE(emoji_person_gesturing_ok,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp N6 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp N6>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp KP_N6>, <&macro_release &kp LALT>
        #endif
      )

      /* 🙇 */ UNICODE(emoji_person_bowing,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp N7 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp N7>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp KP_N7>, <&macro_release &kp LALT>
        #endif
      )

      /* 🙋 */ UNICODE(emoji_person_raising_hand,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp B &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp B>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp B>, <&macro_release &kp LALT>
        #endif
      )

      /* 🙅 */ UNICODE(emoji_person_gesturing_no,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp N5 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp N5>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp KP_N5>, <&macro_release &kp LALT>
        #endif
      )

      /* 🤷 */ UNICODE(emoji_person_shrugging,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N3 &kp N7 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N3 &kp N7>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N3 &kp KP_N7>, <&macro_release &kp LALT>
        #endif
      )

      /* ✅ */ UNICODE(emoji_checkoff,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N7 &kp N0 &kp N5 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N0 &kp N5>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N0 &kp KP_N5>, <&macro_release &kp LALT>
        #endif
      )

      /* 💯 */ UNICODE(emoji_100,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp A &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp A &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp A &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* ⚠️ */ UNICODE(emoji_warning,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N6 &kp A &kp N0 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp A &kp N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp A &kp KP_N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* ❌ */ UNICODE(emoji_x,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N7 &kp N4 &kp C &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N4 &kp C>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N4 &kp C>, <&macro_release &kp LALT>
        #endif
      )

      /* ❓ */ UNICODE(emoji_question,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N7 &kp N5 &kp N3 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N5 &kp N3>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N5 &kp KP_N3>, <&macro_release &kp LALT>
        #endif
      )

      /* 🧑‍🚀 */ UNICODE(emoji_astronaut,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp D &kp N1 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp N2 &kp N0 &kp N0 &kp D &kp ENTER>, <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N8 &kp N0 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp D &kp N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N0 &kp D>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N8 &kp N0>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp D &kp KP_N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N0 &kp D>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N8 &kp KP_N0>, <&macro_release &kp LALT>
        #endif
      )

      /* 🤓 */ UNICODE(emoji_nerd,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N1 &kp N3 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N1 &kp N3>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N1 &kp KP_N3>, <&macro_release &kp LALT>
        #endif
      )

      /* ✨ */ UNICODE(emoji_sparkles,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N7 &kp N2 &kp N8 &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N2 &kp N8>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N2 &kp KP_N8>, <&macro_release &kp LALT>
        #endif
      )

      /* 🙌 */ UNICODE(emoji_raised_hands,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp C &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp C>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp C>, <&macro_release &kp LALT>
        #endif
      )

      /* ☝️ */ UNICODE(emoji_point_up,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N2 &kp N6 &kp N1 &kp D &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp N1 &kp D>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp KP_N1 &kp D>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
        #endif
      )

      /* 👍 */ UNICODE(emoji_thumbs_up,
        #if UNICODE_TARGET_OS == 1
          <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N4 &kp D &kp ENTER>
        #elif UNICODE_TARGET_OS == 2
          <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N4 &kp D>, <&macro_release &kp LALT>
        #elif UNICODE_TARGET_OS == 3
          <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N4 &kp D>, <&macro_release &kp LALT>
        #endif
      )

};

/*HACK*/};
    #if EMOJI_GENDER_SIGN_PRESET == 0
      emoji_gender_sign_preset: &none {};
    #elif EMOJI_GENDER_SIGN_PRESET == 1
      emoji_gender_sign_preset: &emoji_male_sign {};
    #elif EMOJI_GENDER_SIGN_PRESET == 2
      emoji_gender_sign_preset: &emoji_female_sign {};
    #endif
    #if EMOJI_SKIN_TONE_PRESET == 0
      emoji_skin_tone_preset: &none {};
    #elif EMOJI_SKIN_TONE_PRESET == 1
      emoji_skin_tone_preset: &emoji_light_skin_tone {};
    #elif EMOJI_SKIN_TONE_PRESET == 2
      emoji_skin_tone_preset: &emoji_medium_light_skin_tone {};
    #elif EMOJI_SKIN_TONE_PRESET == 3
      emoji_skin_tone_preset: &emoji_medium_skin_tone {};
    #elif EMOJI_SKIN_TONE_PRESET == 4
      emoji_skin_tone_preset: &emoji_medium_dark_skin_tone {};
    #elif EMOJI_SKIN_TONE_PRESET == 5
      emoji_skin_tone_preset: &emoji_dark_skin_tone {};
    #endif
    #if EMOJI_HAIR_STYLE_PRESET == 0
      emoji_hair_style_preset: &none {};
    #elif EMOJI_HAIR_STYLE_PRESET == 1
      emoji_hair_style_preset: &emoji_bald {};
    #elif EMOJI_HAIR_STYLE_PRESET == 2
      emoji_hair_style_preset: &emoji_red_hair {};
    #elif EMOJI_HAIR_STYLE_PRESET == 3
      emoji_hair_style_preset: &emoji_curly_hair {};
    #elif EMOJI_HAIR_STYLE_PRESET == 4
      emoji_hair_style_preset: &emoji_white_hair {};
    #endif
/*HACK*//{

//////////////////////////////////////////////////////////////////////////
//
// Mouse keys (control mouse via keyboard) -- requires PR23 beta firmware:
// select "community.pr23.mouse-keys" from the drop-down menu located at
// Glove80 Layout Editor > Settings > Advanced Settings > Firmware Version
//
// https://gist.github.com/krissen/dd27082e7ab0575619c7a31f4d2ec7ae
// https://github.com/zmkfirmware/zmk/compare/main...urob:zmk:mouse-3.2
// https://dev.glove80.com/#/layout/user/1d17ccc0-069c-4ec4-a2c3-69d941befc8f
//
//////////////////////////////////////////////////////////////////////////

//
// ENABLE_MOUSE_KEYS activates support for mouse keys if defined; otherwise
// mouse keys are deactivated (they're transformed into no-ops) by default.
// To use this feature, uncomment the following line (remove leading "//").
//
//#define ENABLE_MOUSE_KEYS // requires PR23 beta firmware: see note above

//
// MOUSE_MOVE_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#ifndef MOUSE_MOVE_DELAY
#define MOUSE_MOVE_DELAY 0
#endif

//
// MOUSE_MOVE_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_MOVE_ACCELERATION_EXPONENT
#define MOUSE_MOVE_ACCELERATION_EXPONENT 1
#endif

//
// MOUSE_MOVE_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_MOVE_TIME_TO_MAXIMUM_SPEED
#define MOUSE_MOVE_TIME_TO_MAXIMUM_SPEED 300
#endif

//
// MOUSE_MOVE_MAXIMUM_SPEED defines how quickly the mouse pointer can move.
//
#ifndef MOUSE_MOVE_MAXIMUM_SPEED
#define MOUSE_MOVE_MAXIMUM_SPEED 600
#endif

//
// MOUSE_SCROLL_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#ifndef MOUSE_SCROLL_DELAY
#define MOUSE_SCROLL_DELAY 0
#endif

//
// MOUSE_SCROLL_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_SCROLL_ACCELERATION_EXPONENT
#define MOUSE_SCROLL_ACCELERATION_EXPONENT 0
#endif

//
// MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED
#define MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED 300
#endif

//
// MOUSE_SCROLL_MAXIMUM_SPEED defines how quickly the mouse wheel can scroll.
//
#ifndef MOUSE_SCROLL_MAXIMUM_SPEED
#define MOUSE_SCROLL_MAXIMUM_SPEED 10
#endif

/*HACK*/};
#ifdef ENABLE_MOUSE_KEYS
    // ==== MOUSE-KEY <section begins> ====
    #include <dt-bindings/zmk/mouse.h>

    &mmv {
      delay-ms = <MOUSE_MOVE_DELAY>;
      acceleration-exponent = <MOUSE_MOVE_ACCELERATION_EXPONENT>;
      time-to-max-speed-ms = <MOUSE_MOVE_TIME_TO_MAXIMUM_SPEED>;
      #define U_MOUSE_MOVE_MAX MOUSE_MOVE_MAXIMUM_SPEED
    };

    &mwh {
      delay-ms = <MOUSE_SCROLL_DELAY>;
      acceleration-exponent = <MOUSE_SCROLL_ACCELERATION_EXPONENT>;
      time-to-max-speed-ms = <MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED>;
      #define U_MOUSE_SCROLL_MAX MOUSE_SCROLL_MAXIMUM_SPEED
    };
    #undef MOVE_UP
    #undef MOVE_DOWN
    #undef MOVE_LEFT
    #undef MOVE_RIGHT
    #define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
    #define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
    #define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
    #define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)
    #undef SCROLL_UP
    #undef SCROLL_DOWN
    #undef SCROLL_LEFT
    #undef SCROLL_RIGHT
    #define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
    #define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
    #define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
    #define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)
    // ==== MOUSE-KEY <section ends> =====
#else
    #define mkp none
    #define mmv none
    #define mwh none
    #define LCLK
    #define MCLK
    #define RCLK
    #define MB1
    #define MB2
    #define MB3
    #define MB4
    #define MB5
    #define MB6
    #define MB7
    #define MB8
    #define MOVE_UP
    #define MOVE_DOWN
    #define MOVE_LEFT
    #define MOVE_RIGHT
    #define SCROLL_UP
    #define SCROLL_DOWN
    #define SCROLL_LEFT
    #define SCROLL_RIGHT
#endif
/*HACK*//{
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Dvorak {
            bindings = <
               &kp F1              &kp F2                  &kp F3               &kp F4                  &kp F5                                                                                                                                                                       &kp F6                &kp F7               &kp F8               &kp F9               &kp F10
            &kp EQUAL              &kp N1                  &kp N2               &kp N3                  &kp N4  &kp N5                                                                                                                                    &kp N6                     &kp N7                &kp N8               &kp N9               &kp N0              &kp BSLH
            &kp GRAVE             &kp SQT  &homey_left RALT COMMA              &kp DOT                   &kp P   &kp Y                                                                                                                                     &kp F                      &kp G                 &kp C   &homey_left RALT R                &kp L             &kp SLASH
               &cappy  &homey_left LGUI A      &homey_left LALT O  &homey_left LCTRL E     &shift_left LSHFT U   &kp I                                                                                                                                     &kp D       &shift_right LSHFT H  &homey_right LCTRL T  &homey_right LALT N  &homey_right LGUI S             &kp MINUS
            &kp LSHFT            &kp SEMI                   &kp Q                &kp J                   &kp K   &kp X      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER   &kp B                      &kp M                 &kp W                &kp V                &kp Z             &kp RSHFT
 &magic LAYER_Magic 0            &kp HOME               &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END          &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE          &thumb LAYER_World LS(N9)              &kp LBKT             &kp RBKT           &kp LS(N0)  &magic LAYER_Magic 0
            >;
        };

        layer_Engrammer {
            bindings = <
               &kp F1              &kp F2              &kp F3               &kp F4                  &kp F5                                                                                                                                                                            &kp F6                &kp F7               &kp F8               &kp F9               &kp F10
            &kp EQUAL              &kp N1              &kp N2               &kp N3                  &kp N4     &kp N5                                                                                                                                      &kp N6                     &kp N7                &kp N8               &kp N9               &kp N0              &kp BSLH
            &kp GRAVE               &kp B  &homey_left RALT Y                &kp O                   &kp U    &kp SQT                                                                                                                                    &kp SEMI                      &kp L                 &kp D  &homey_right RALT W                &kp V                 &kp Z
               &cappy  &homey_left LGUI C  &homey_left LALT I  &homey_left LCTRL E     &shift_left LSHFT A  &kp COMMA                                                                                                                                     &kp DOT       &shift_right LSHFT H  &homey_right LCTRL T  &homey_right LALT S  &homey_right LGUI N                 &kp Q
            &kp LSHFT               &kp G               &kp X                &kp J                   &kp K  &kp MINUS      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER  &kp FSLH                      &kp R                 &kp M                &kp F                &kp P             &kp RSHFT
 &magic LAYER_Magic 0            &kp HOME           &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END             &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE            &thumb LAYER_World LS(N9)              &kp LBKT             &kp RBKT           &kp LS(N0)  &magic LAYER_Magic 0
            >;
        };

        layer_Engram {
            bindings = <
               &kp F1              &kp F2              &kp F3               &kp F4                  &kp F5                                                                                                                                                                                        &kp F6                &kp F7               &kp F8               &kp F9               &kp F10
             &kp LBKT           &engram_1           &engram_2            &engram_3               &engram_4      &engram_5                                                                                                                                           &engram_6                  &engram_7             &engram_8            &engram_9            &engram_0              &kp RBKT
           &engram_at               &kp B  &homey_left RALT Y                &kp O                   &kp U   &engram_apos                                                                                                                                      &engram_dquote                      &kp L                 &kp D  &homey_right RALT W                &kp V                 &kp Z
               &cappy  &homey_left LGUI C  &homey_left LALT I  &homey_left LCTRL E     &shift_left LSHFT A  &engram_comma                                                                                                                                      &engram_period       &shift_right LSHFT H  &homey_right LCTRL T  &homey_right LALT S  &homey_right LGUI N                 &kp Q
            &kp LSHFT               &kp G               &kp X                &kp J                   &kp K      &kp MINUS      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER  &engram_question                      &kp R                 &kp M                &kp F                &kp P             &kp RSHFT
 &magic LAYER_Magic 0            &kp HOME           &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END                 &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE                    &thumb LAYER_World LS(N9)          &engram_hash        &engram_slash           &kp LS(N0)  &magic LAYER_Magic 0
            >;
        };

        layer_ColemakDH {
            bindings = <
               &kp F1              &kp F2              &kp F3               &kp F4                  &kp F5                                                                                                                                                                       &kp F6                &kp F7               &kp F8               &kp F9               &kp F10
            &kp EQUAL              &kp N1              &kp N2               &kp N3                  &kp N4  &kp N5                                                                                                                                    &kp N6                     &kp N7                &kp N8               &kp N9               &kp N0              &kp BSLH
            &kp GRAVE               &kp Q  &homey_left RALT W                &kp F                   &kp P   &kp B                                                                                                                                     &kp J                      &kp L                 &kp U   &homey_left RALT Y             &kp SEMI             &kp MINUS
               &cappy  &homey_left LGUI A  &homey_left LALT R  &homey_left LCTRL S     &shift_left LSHFT T   &kp G                                                                                                                                     &kp M       &shift_right LSHFT N  &homey_right LCTRL E  &homey_right LALT I  &homey_right LGUI O               &kp SQT
            &kp LSHFT               &kp Z               &kp X                &kp C                   &kp D   &kp V      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER   &kp K                      &kp H             &kp COMMA              &kp DOT             &kp FSLH             &kp RSHFT
 &magic LAYER_Magic 0            &kp HOME           &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END          &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE          &thumb LAYER_World LS(N9)              &kp LBKT             &kp RBKT           &kp LS(N0)  &magic LAYER_Magic 0
            >;
        };

        layer_Colemak {
            bindings = <
               &kp F1              &kp F2              &kp F3               &kp F4                  &kp F5                                                                                                                                                                       &kp F6                &kp F7               &kp F8               &kp F9               &kp F10
            &kp EQUAL              &kp N1              &kp N2               &kp N3                  &kp N4  &kp N5                                                                                                                                    &kp N6                     &kp N7                &kp N8               &kp N9               &kp N0              &kp BSLH
            &kp GRAVE               &kp Q  &homey_left RALT W                &kp F                   &kp P   &kp G                                                                                                                                     &kp J                      &kp L                 &kp U   &homey_left RALT Y             &kp SEMI             &kp MINUS
               &cappy  &homey_left LGUI A  &homey_left LALT R  &homey_left LCTRL S     &shift_left LSHFT T   &kp D                                                                                                                                     &kp H       &shift_right LSHFT N  &homey_right LCTRL E  &homey_right LALT I  &homey_right LGUI O               &kp SQT
            &kp LSHFT               &kp Z               &kp X                &kp C                   &kp V   &kp B      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER   &kp K                      &kp M             &kp COMMA              &kp DOT             &kp FSLH             &kp RSHFT
 &magic LAYER_Magic 0            &kp HOME           &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END          &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE          &thumb LAYER_World LS(N9)              &kp LBKT             &kp RBKT           &kp LS(N0)  &magic LAYER_Magic 0
            >;
        };

        layer_QWERTY {
            bindings = <
               &kp F1              &kp F2              &kp F3               &kp F4                  &kp F5                                                                                                                                                                       &kp F6                &kp F7               &kp F8                  &kp F9               &kp F10
            &kp EQUAL              &kp N1              &kp N2               &kp N3                  &kp N4  &kp N5                                                                                                                                    &kp N6                     &kp N7                &kp N8               &kp N9                  &kp N0              &kp BSLH
            &kp GRAVE               &kp Q  &homey_left RALT W                &kp E                   &kp R   &kp T                                                                                                                                     &kp Y                      &kp U                 &kp I   &homey_left RALT O                   &kp P             &kp MINUS
               &cappy  &homey_left LGUI A  &homey_left LALT S  &homey_left LCTRL D     &shift_left LSHFT F   &kp G                                                                                                                                     &kp H       &shift_right LSHFT J  &homey_right LCTRL K  &homey_right LALT L  &homey_right LGUI SEMI               &kp SQT
            &kp LSHFT               &kp Z               &kp X                &kp C                   &kp V   &kp B      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER   &kp N                      &kp M             &kp COMMA              &kp DOT                &kp FSLH             &kp RSHFT
 &magic LAYER_Magic 0            &kp HOME           &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END          &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE          &thumb LAYER_World LS(N9)              &kp LBKT             &kp RBKT              &kp LS(N0)  &magic LAYER_Magic 0
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT          &kp C_PP                                                                                                                                                              &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none       &kp PAUSE_BREAK
               &trans         &none           &none           &none             &none   &kp HOME                                                                                                                       &kp LEFT_PARENTHESIS        &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY       &kp PRINTSCREEN
               &trans         &none           &none    &kp UP_ARROW             &none    &kp END                                                                                                                      &kp RIGHT_PARENTHESIS         &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS        &kp SCROLLLOCK
               &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW   &kp RIGHT_ARROW  &kp PG_UP                                                                                                                                &kp PERCENT         &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS                 &none
             &kp LALT     &kp K_APP           &none         &kp F11           &kp F12  &kp PG_DN  &tog LAYER_Function  &tog LAYER_Gaming  &tog LAYER_Typing  &tog LAYER_Typing  &tog LAYER_Gaming  &tog LAYER_System              &kp COMMA         &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER              &kp LALT
 &magic LAYER_Magic 0      &kp CAPS         &kp INS         &kp F11  &tog LAYER_Emoji               &tog LAYER_Cursor  &tog LAYER_Number   &tog LAYER_Lower   &tog LAYER_Lower   &tog LAYER_Mouse  &tog LAYER_Symbol                         &tog LAYER_World     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER  &magic LAYER_Magic 0
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &to 1            &to 2            &to 0            &to 3            &to 4            &to 5                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        layer_Cursor {
            bindings = <
     &none          &none         &none         &none      &none                                                                                                         &none          &none      &none      &none        &none
     &none          &none         &none         &none    &kp DEL    &kp INS                                                                                 &kp INS    &kp DEL          &none      &none      &none        &none
 &kp LC(K)      &sk LSHFT     &kp LC(Y)     &kp LC(Z)   &kp BSPC  &kp LC(X)                                                                               &kp LC(X)   &kp BSPC      &kp LC(Z)  &kp LC(Y)  &sk LSHFT    &kp LC(K)
 &kp LC(L)       &kp LGUI      &kp LALT     &kp LCTRL  &kp LSHFT  &kp LC(C)                                                                               &kp LC(C)   &kp LEFT         &kp UP   &kp DOWN  &kp RIGHT    &kp LC(L)
 &kp LC(J)      &kp LC(F)  &select_word  &select_line  &kp LC(A)  &kp LC(V)   &none   &none              &none  &select_none  &extend_line  &extend_word  &kp LC(V)   &kp HOME      &kp PG_UP  &kp PG_DN    &kp END    &kp LC(J)
 &kp LC(H)  &kp LS(LC(G))  &extend_word  &extend_line  &kp LC(G)              &none   &none  &tog LAYER_Cursor     &kp LC(A)  &select_line  &select_word             &kp LC(F)  &kp LS(LC(G))  &kp LC(G)  &kp LC(H)  &kp LG(DOT)
            >;
        };

        layer_Number {
            bindings = <
      &none     &none     &none      &none      &none                                                                                                        &none       &none          &none         &none         &none
      &none     &none     &none      &none      &none   &none                                                                               &kp LS(N6)  &kp LS(N3)  &kp LS(N4)  &kp LS(GRAVE)    &kp LS(N1)  &kp LS(BSLH)
      &none     &none     &none      &none      &none   &none                                                                               &kp LS(N5)      &kp N7      &kp N8         &kp N9  &kp LS(SEMI)         &kp K
 &kp KP_NUM  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &none                                                                            &kp LS(EQUAL)      &kp N4      &kp N5         &kp N6     &kp MINUS         &kp J
      &none     &none     &none      &none      &none   &none   &none   &none              &none  &kp LS(COMMA)  &kp LS(DOT)  &kp EQUAL     &kp LS(N8)      &kp N1      &kp N2         &kp N3      &kp FSLH     &kp LS(G)
      &none     &none     &none      &none      &none           &none   &none  &tog LAYER_Number      &kp COMMA      &kp DOT     &kp N0                     &trans      &trans         &trans        &trans    &kp LS(N2)
            >;
        };

        layer_Function {
            bindings = <
    &none     &none     &none      &none      &none                                                                                                                 &none         &none         &none          &none           &none
    &none     &none     &none      &none      &none   &none                                                                               &kp C_MEDIA_HOME     &kp C_PLAY    &kp C_PREV    &kp C_NEXT     &kp C_STOP     &kp C_EJECT
    &none     &none     &none      &none      &none   &none                                                                                      &kp K_WWW         &kp F7        &kp F8        &kp F9        &kp F10         &kp F13
 &kp CAPS  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &none                                                                                     &kp K_CALC         &kp F4        &kp F5        &kp F6        &kp F11         &kp F14
    &none     &none     &none      &none      &none   &none   &none   &none                &none  &kp C_PREV    &kp C_NEXT      &kp C_PP    &kp C_AL_FILES         &kp F1        &kp F2        &kp F3        &kp F12         &kp F15
    &none     &none     &none      &none      &none           &none   &none  &tog LAYER_Function  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP                    &kp C_BRI_MAX  &kp C_BRI_UP  &kp C_BRI_DN  &kp C_BRI_MIN  &kp C_BRI_AUTO
            >;
        };

        layer_Symbol {
            bindings = <
         &none          &none         &none          &none          &none                                                                                                     &none        &none      &none     &none   &none
         &none      &kp GRAVE    &kp LS(N9)     &kp LS(N0)       &kp SEMI     &kp COMMA                                                                            &none      &none        &none      &none     &none   &none
    &kp LS(N1)   &kp LS(LBKT)       &kp SQT    &kp LS(SQT)   &kp LS(RBKT)  &kp LS(FSLH)                                                                           &trans  &kp LSHFT    &kp LCTRL   &kp LALT  &kp LGUI   &none
    &kp LS(N3)     &kp LS(N6)     &kp EQUAL  &kp LS(MINUS)     &kp LS(N4)    &kp LS(N8)                                                                           &trans   &kp BSPC      &kp TAB  &kp SPACE   &kp RET   &none
 &kp LS(GRAVE)  &kp LS(COMMA)  &kp LS(BSLH)      &kp MINUS    &kp LS(DOT)      &kp FSLH    &kp BSLH       &kp DOT  &kp LS(N8)              &none   &none   &none  &trans    &kp DEL  &kp LS(TAB)      &none     &none   &none
    &kp LS(N2)     &kp LS(N7)      &kp LBKT       &kp RBKT  &kp LS(EQUAL)                &kp LS(N5)  &kp LS(SEMI)    &kp SEMI  &tog LAYER_Symbol   &none   &none             &trans       &trans     &trans    &trans   &none
            >;
        };

        layer_Mouse {
            bindings = <
  &none   &none             &none             &none              &none                                                                                    &none      &none     &none     &none   &none
  &none   &none             &none             &none              &none   &none                                                                 &none      &none      &none     &none     &none   &none
  &none   &none  &mwh SCROLL_LEFT      &mmv MOVE_UP  &mwh SCROLL_RIGHT   &none                                                                 &none      &none      &none     &none     &none   &none
  &none   &none    &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_RIGHT   &none                                                                 &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI   &none
  &none   &none             &none  &mwh SCROLL_DOWN     &mwh SCROLL_UP   &none  &mkp MB3     &none   &none             &none   &none   &none   &none      &none      &none     &none     &none   &none
  &none   &none             &none             &none              &none          &mkp MB1  &mkp MB2   &none  &tog LAYER_Mouse   &none   &none              &none      &none     &none     &none   &none
            >;
        };

        layer_System {
            bindings = <
           &none            &none            &none            &none            &none                                                                                                   &none      &none     &none     &none   &none
           &none            &none            &none            &none            &none   &none                                                                                &none      &none      &none     &none     &none   &none
           &none            &none  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI            &none   &none                                                                                &none      &none      &none     &none     &none   &none
 &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF   &none                                                                                &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI   &none
           &none  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI   &none  &kp K_LOCK  &kp C_SLEEP        &kp C_PWR              &none   &none   &none   &none      &none      &none     &none     &none   &none
           &none            &none            &none            &none            &none           &kp PSCRN     &kp SLCK  &kp PAUSE_BREAK  &tog LAYER_System   &none   &none              &none      &none     &none     &none   &none
            >;
        };

        layer_Gaming {
            bindings = <
    &trans     &trans  &trans  &trans  &trans                                                                                             &trans  &trans     &trans   &trans    &trans
    &trans     &trans  &trans  &trans  &trans   &trans                                                                            &trans  &trans  &trans     &trans   &trans    &trans
 &kp MINUS  &kp GRAVE   &kp B   &kp N   &kp M  &kp SQT                                                                             &kp B   &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH
     &kp T    &kp TAB   &kp Q   &kp W   &kp E    &kp R                                                                             &kp T   &kp Y   &kp U      &kp I    &kp O     &kp P
     &kp G  &kp LSHFT   &kp A   &kp S   &kp D    &kp F    &kp ESC   &kp RET  &kp PAUSE_BREAK           &kp BSPC  &kp DEL  &trans   &kp G   &kp H   &kp J      &kp K    &kp L  &kp SEMI
     &kp V  &kp LCTRL   &kp Z   &kp X   &kp C           &kp SPACE  &kp LALT         &kp LGUI  &tog LAYER_Gaming   &trans  &trans          &trans  &trans     &trans   &trans    &trans
            >;
        };

        layer_Typing {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                                               &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                                               &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans   &kp Y  &trans  &trans  &trans                                                                               &trans  &trans  &trans   &kp W  &trans  &trans
 &trans   &kp C   &kp I   &kp E   &kp A  &trans                                                                               &trans   &kp H   &kp T   &kp S   &kp N  &trans
 &trans  &trans  &trans  &trans  &trans  &trans   &kp ESC   &trans             &trans             &trans   &trans    &kp RET  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &kp BSPC  &kp DEL  &tog LAYER_Typing  &tog LAYER_Typing  &kp TAB  &kp SPACE          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Emoji {
            bindings = <
              &none                    &none                          &none                      &none                         &none                                                                                                                                                          &emoji_new_moon  &emoji_waxing_crescent_moon   &emoji_first_quarter_moon  &emoji_waxing_gibbous_moon         &emoji_full_moon
              &none   &emoji_light_skin_tone  &emoji_medium_light_skin_tone    &emoji_medium_skin_tone  &emoji_medium_dark_skin_tone  &emoji_dark_skin_tone                                                                                                           &emoji_tada                &emoji_heart                  &emoji_fire               &emoji_muscle      &emoji_person_climbing            &emoji_rocket
  &emoji_left_arrow              &emoji_bald                &emoji_red_hair          &emoji_curly_hair             &emoji_white_hair     &emoji_right_arrow                                                                                                     &emoji_sunglasses          &emoji_star_struck                   &emoji_joy           &emoji_cold_sweat               &emoji_scream    &emoji_exploding_head
 &emoji_female_sign  &emoji_skin_tone_preset                     &emoji_zwj  &emoji_gender_sign_preset      &emoji_hair_style_preset       &emoji_male_sign                                                                                                   &emoji_snap_fingers              &emoji_ok_hand                  &emoji_pray          &emoji_sweat_smile         &emoji_disappointed          &emoji_thinking
   &emoji_old_woman             &emoji_woman                    &emoji_girl                 &emoji_boy                    &emoji_man         &emoji_old_man   &none   &none             &none     &emoji_astronaut      &emoji_nerd   &emoji_sparkles  &emoji_person_tipping_hand  &emoji_person_gesturing_ok         &emoji_person_bowing  &emoji_person_raising_hand  &emoji_person_gesturing_no  &emoji_person_shrugging
              &none                    &none                    &emoji_baby         &emoji_baby_bottle                         &none                          &none   &none  &tog LAYER_Emoji  &emoji_raised_hands  &emoji_point_up  &emoji_thumbs_up                                         &emoji_checkoff                   &emoji_100              &emoji_warning                    &emoji_x          &emoji_question
            >;
        };

        layer_World {
            bindings = <
          &none                      &none                  &none                 &none                      &none                                                                                                      &none      &none      &none      &none   &none
          &none                      &none                  &none                 &none                      &none               &none                                                                       &none      &none      &none      &none      &none   &none
          &none         &world_degree_sign          &world_y_base         &world_o_base              &world_u_base  &world_quotes_base                                                                       &none      &none   &kp LALT   &kp RALT      &none   &none
 &world_n_tilde           &world_c_cedilla          &world_i_base         &world_e_base              &world_a_base               &none                                                                       &none  &kp LSHFT  &kp LCTRL  &kp RCTRL  &kp RSHFT   &none
          &none  &world_quotes_angle_lower    &world_exclaim_left  &world_question_left  &world_quotes_angle_upper               &none   &none   &none             &none             &none   &none   &none   &none      &none      &none      &none      &none   &none
          &none        &world_section_sign  &world_paragraph_sign      &world_o_ordinal           &world_a_ordinal                       &none   &none  &tog LAYER_World  &tog LAYER_World   &none   &none              &none      &none      &none      &none   &none
            >;
        };

    };
};
